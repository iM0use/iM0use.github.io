<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtf</title>
  
  
  <link href="http://im0use.github.io/atom.xml" rel="self"/>
  
  <link href="http://im0use.github.io/"/>
  <updated>2022-05-19T10:30:31.239Z</updated>
  <id>http://im0use.github.io/</id>
  
  <author>
    <name>wtfff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>acm_solve</title>
    <link href="http://im0use.github.io/2022/05/19/acm_solve/"/>
    <id>http://im0use.github.io/2022/05/19/acm_solve/</id>
    <published>2022-05-18T16:38:56.000Z</published>
    <updated>2022-05-19T10:30:31.239Z</updated>
    
    <content type="html"><![CDATA[<p>马上省赛，为了应付一下这个考试，得看看往年题，总结一下经验。</p><span id="more"></span><h2 id="B-Build-Roads"><a href="#B-Build-Roads" class="headerlink" title="B. Build Roads"></a>B. Build Roads</h2><p>一个王国，有n个城市。想建n-1条边连接城市，第i个城市有一个建筑公司经验值为ai。想在i和j城市之间建一条路，需要两个城市的建筑公司互相竞争，在修路中两家公司会起冲突，从而造成材料浪费。浪费材料为gcd(ai,aj)</p><p>请设计一条路连接n个城市用n条边，花费最少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gen</span><span class="params">()</span> {<span class="comment">// a[i] = gen()</span></span><br><span class="line">    <span class="keyword">return</span> xorshitf64() % (R - L + <span class="number">1</span>) + L;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>分析：如果R = L，那么ai = L，相邻城市之间花费L，总花费L*(n-1)。如果R ≠  L，n较小时暴力连边建生成树(n^2)；如果n较大，若R - L + 1较大，根据素数分布，素数相距大概几百左右，这样L到(R - L + 1) + L之间必然有一个素数，有一个数为素数，gcd就为1，答案为(n - 1)，若R - L + 1较小，R - L + 1区间之内会被取满，根据连续的两个数必然互质可得结果仍然为(n - 1)。</p><p>暴力建树，单向建边，取其中任意n-1条边一定会把n个城市给连在一起。所以不需要并查，直接排序依据最小权取n-1个即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; e;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">gen</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        e.<span class="built_in">push_back</span>(__gcd(a[i], a[j]));</span><br><span class="line"><span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) ans += e[i];</span><br><span class="line"><span class="comment">// output ans</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当n较大时</span></span><br><span class="line">ans = n - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// L = R时</span></span><br><span class="line">ans = (n - <span class="number">1</span>) * L;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ull n, L, R, seed, a[<span class="number">200002</span>];</span><br><span class="line"><span class="function">ull <span class="title">xorshift64</span><span class="params">()</span> </span>{</span><br><span class="line">ull x = seed;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">x ^= x &gt;&gt; <span class="number">7</span>;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">return</span> seed = x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">xorshift64</span>() % (R - L + <span class="number">1</span>) + L;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>{</span><br><span class="line">ull ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; L &gt;&gt; R &gt;&gt; seed;</span><br><span class="line"><span class="keyword">if</span> (L == R) ans = (n - <span class="number">1</span>) * L;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= <span class="number">20</span>) {</span><br><span class="line">        vector&lt;ull&gt; e;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">gen</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                e.<span class="built_in">push_back</span>(__gcd(a[i], a[j]));</span><br><span class="line">        <span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) ans += e[i];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans = n - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="C-Cat-Virus"><a href="#C-Cat-Virus" class="headerlink" title="C. Cat Virus"></a>C. Cat Virus</h2><p>一个国家，有很多族可以被视为有根树。一个族包含黑色和白色，改族新生儿可能是黑色，如果一个新生儿是黑色，那么它的后代也是黑色。</p><p>给一个整数k，可以有k种方式标记黑色和白色组成家族成员。两种方式肯定有不完全相同的成员，至少有一个黑色，而另一个为白色。</p><p>问如何建一个有根树使得方式为k。</p><p>设f(u)为染色u及u所有子树的方案树，若将u染成黑色，则只有一种方案，若将u染成白色，则设u的子节点为v，f(u)=proc(f(v))+1，u方案数为子树方案数之积在加上黑色的一种方案。各子树之间互不影响，所以是乘积。</p><p>若k为奇数，我们给k弄一个左儿子和右儿子，向右儿子方向走，f(r) = (k - 1) / 2，f(l) = 2, f(u) = f(l) * f(r) + 1，若k为偶数，我们直接让u连接一个子节点，然后到下一层，方案数边成k - 1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> pw)</span> </span>{ <span class="comment">// idx-序号，pw-方案数 </span></span><br><span class="line"><span class="keyword">if</span> (pw &lt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (pw == <span class="number">3</span>) {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">res++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (pw &amp; <span class="number">1</span>) {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">2</span>));</span><br><span class="line">res += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">dfs</span>(idx + <span class="number">2</span>, pw &gt;&gt; <span class="number">1</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">res++;</span><br><span class="line"><span class="built_in">dfs</span>(idx + <span class="number">1</span>, pw - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>{</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">2</span>) {</span><br><span class="line">cout &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="string">"\n"</span>; <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">3</span>) {</span><br><span class="line">cout &lt;&lt; <span class="string">"2\n1 2\n"</span>; <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">dfs</span>(<span class="number">1</span>, k);</span><br><span class="line">cout &lt;&lt; res + <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: ans) {</span><br><span class="line">cout &lt;&lt; i.first &lt;&lt; <span class="string">" "</span> &lt;&lt; i.second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="D-Dyson-Box"><a href="#D-Dyson-Box" class="headerlink" title="D. Dyson Box"></a>D. Dyson Box</h2><p>一个盒子二维方格，左下角坐标为（0，0），右上角坐标为（2×10 ^ 5，2×10 ^ 5）。</p><p>将有n个事件发生，第i次事件时出现一个立方体，左下角坐标为（xi-1，yi-1），右上角坐标为（xi，yi）。</p><p>盒子里有两个地心引力的方向，水平和竖直，有一半的可能是水平，剩下一半是竖直。她开始测量所有立方体轮廓的总长。如果引力方向是水平，所有立方体水平向左移动，如果是竖直，则竖直向下移动。</p><p>计算每次事件后两种情况（两种情况是指向左移动或向下移动）的轮廓总长。</p><p>对于竖直情况，当已经有一块，添加下一块时要减去2，对于旁边的两列，如果旁边两栋大楼更高，就减2。</p><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/xxx.3r9r0or8gok0.webp" alt="xxx"></p><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518200737208.evk8cdnb9iw.webp" alt="image-20220518200737208"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout &lt;&lt; <span class="string">"[*]"</span> &lt;&lt; #x &lt;&lt; <span class="string">" = "</span> &lt;&lt; x &lt;&lt; <span class="string">"\n"</span>;</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, a[maxn], b[maxn];</span><br><span class="line"><span class="type">int</span> ans_x, ans_y;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) {</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (a[x]) ans_x -= <span class="number">2</span>;</span><br><span class="line">a[x]++;</span><br><span class="line"><span class="keyword">if</span> (a[x] &lt;= a[x - <span class="number">1</span>]) ans_x -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[x] &lt;= a[x + <span class="number">1</span>]) ans_x -= <span class="number">2</span>;</span><br><span class="line">ans_x += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (b[y]) ans_y -= <span class="number">2</span>;</span><br><span class="line">b[y]++;</span><br><span class="line"><span class="keyword">if</span> (b[y] &lt;= b[y - <span class="number">1</span>]) ans_y -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (b[y] &lt;= b[y + <span class="number">1</span>]) ans_y -= <span class="number">2</span>;</span><br><span class="line">ans_y += <span class="number">4</span>;</span><br><span class="line"><span class="comment">//debug(b[x]);</span></span><br><span class="line"><span class="comment">//debug(b[x + 1]);</span></span><br><span class="line"><span class="comment">//debug(b[x - 1]);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans_x &lt;&lt; <span class="string">" "</span> &lt;&lt; ans_y &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="F-Birthday-Cake"><a href="#F-Birthday-Cake" class="headerlink" title="F. Birthday Cake"></a>F. Birthday Cake</h2><p>请帮助Yamabuki分蛋糕，Yamabuki有n种不同的蛋糕，可以用小写拉丁字母表示，表示蛋糕上面有什么，字符串的拼接表示蛋糕的合并。</p><p>若AB满足CC结构，（A，B两个字符串拼接后可以拆成两个相同的字符串即满足此规律），若AB满足，则BA也满足，所以枚举A的时候找可以满足条件的B即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod[<span class="number">2</span>] = {<span class="number">998244353</span>,<span class="number">1000000007</span>};</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="number">233</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">string a[maxn];</span><br><span class="line">ll Hase[maxn][<span class="number">2</span>];</span><br><span class="line">ll fac[maxn][<span class="number">2</span>];</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,<span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">0</span>] = fac[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">400000</span>;++i){</span><br><span class="line">        fac[i][<span class="number">0</span>] = fac[i<span class="number">-1</span>][<span class="number">0</span>]*sz%mod[<span class="number">0</span>];</span><br><span class="line">        fac[i][<span class="number">1</span>] = fac[i<span class="number">-1</span>][<span class="number">1</span>]*sz%mod[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i){</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,[](<span class="type">const</span> string&amp;a,<span class="type">const</span> string &amp;b)-&gt;<span class="type">bool</span>{</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>();</span><br><span class="line">    });</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i){</span><br><span class="line">        ll val[<span class="number">2</span>] = {<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; a[i].<span class="built_in">size</span>();++j){</span><br><span class="line">            val[<span class="number">0</span>] = val[<span class="number">0</span>]*sz+a[i][j];</span><br><span class="line">            val[<span class="number">0</span>] %= mod[<span class="number">0</span>];</span><br><span class="line">            Hase[j+<span class="number">1</span>][<span class="number">0</span>] = val[<span class="number">0</span>];</span><br><span class="line">            val[<span class="number">1</span>] = val[<span class="number">1</span>]*sz+a[i][j];</span><br><span class="line">            val[<span class="number">1</span>] %= mod[<span class="number">1</span>];</span><br><span class="line">            Hase[j+<span class="number">1</span>][<span class="number">1</span>] = val[<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        ans += mp[<span class="built_in">make_pair</span>(val[<span class="number">0</span>],val[<span class="number">1</span>])];</span><br><span class="line">        <span class="type">int</span> len = a[i].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= len/<span class="number">2</span>;++j){</span><br><span class="line">            ll hs1 = Hase[j][<span class="number">0</span>];</span><br><span class="line">            ll hs2 = (Hase[len][<span class="number">0</span>]-Hase[len-j][<span class="number">0</span>]*fac[j][<span class="number">0</span>]%mod[<span class="number">0</span>]+mod[<span class="number">0</span>])%mod[<span class="number">0</span>];</span><br><span class="line">            ll hs3 = Hase[j][<span class="number">1</span>];</span><br><span class="line">            ll hs4 = (Hase[len][<span class="number">1</span>]-Hase[len-j][<span class="number">1</span>]*fac[j][<span class="number">1</span>]%mod[<span class="number">1</span>]+mod[<span class="number">1</span>])%mod[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(hs1==hs2&amp;&amp;hs3==hs4){</span><br><span class="line">                ll hs5 = (Hase[len-j][<span class="number">0</span>]-Hase[j][<span class="number">0</span>]*fac[len-j-j][<span class="number">0</span>]%mod[<span class="number">0</span>]+mod[<span class="number">0</span>])%mod[<span class="number">0</span>];</span><br><span class="line">                ll hs6 = (Hase[len-j][<span class="number">1</span>]-Hase[j][<span class="number">1</span>]*fac[len-j-j][<span class="number">1</span>]%mod[<span class="number">1</span>]+mod[<span class="number">1</span>])%mod[<span class="number">1</span>];</span><br><span class="line">                ans += mp[<span class="built_in">make_pair</span>(hs5,hs6)];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        mp[<span class="built_in">make_pair</span>(val[<span class="number">0</span>],val[<span class="number">1</span>])]++;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><img src="\images\log.png">]]></content>
    
    
    <summary type="html">&lt;p&gt;马上省赛，为了应付一下这个考试，得看看往年题，总结一下经验。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HITCON-train-hacknote</title>
    <link href="http://im0use.github.io/2022/05/18/HITCON-train-hacknote/"/>
    <id>http://im0use.github.io/2022/05/18/HITCON-train-hacknote/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-18T15:25:49.925Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>一个写笔记的程序，下面是程序的一些功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ ./hacknote </span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :1</span><br><span class="line">Note size :12</span><br><span class="line">Content :wtffff</span><br><span class="line">Success !</span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :3</span><br><span class="line">Index :0</span><br><span class="line">wtffff</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :4</span><br></pre></td></tr></table></figure><p>因为想去弄懂一些细节，所以在GitHub上搜到了源代码。</p><p>顺便看看并总结angelboy大神的幻灯片，分享收获。</p><p>The workflow of malloc</p><ul><li>第一次执行 malloc</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518230240720.3pwbksljbeo0.webp" alt="image-20220518230240720"></p><ul><li>无论一开始 malloc 多少空间 &lt; 128 KB 都会有 kernel 给132 KB 的 heap segment (rw) 这部分为 main arena</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518225637309.1vf5jk0s4wbk.webp" alt="image-20220518225637309"></p><ul><li>第二次执行 malloc 时，只要分配的空间大小不超过 128 KB，则不再执行 system call 跟系统要空间，超过大小才会有 brk 从kernel 索要空间存储。<ul><li>即使 free 掉所有 main arena 分配的空间，也不会立即还给 kernel</li></ul></li><li>这时存储空间由 glibc 管理</li></ul><h2 id="Mechanism-of-glibc-malloc"><a href="#Mechanism-of-glibc-malloc" class="headerlink" title="Mechanism of glibc malloc"></a>Mechanism of glibc malloc</h2><ul><li>Chunk<ul><li>glibc 在用作存储管理时的数据结构</li><li>malloc 时分配出去的为一个 chunk</li><li>chunk header（prev_size + size）+ user data</li><li>如果该 chunk 被 free 则会将 chunk 加入叫做 bin 的链表里</li></ul></li><li>分类<ul><li>​Allocated chunk</li><li>​    Free chunk</li><li>​    Top chunk</li></ul></li><li>heap</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518231006560.33g13n7oknc0.webp" alt="image-20220518231006560"></p><ul><li>Allocated chunk<ul><li>prev_size<ul><li>如果上一个的 chunk 是 freed，则该位置上会存有上一个 chunk 的 size（包括 header）</li><li>这里指的上一个是在连续存储的上一个</li></ul></li><li>size<ul><li>该 chunk 大小，其中有三个 flag<ul><li>PREV_INUSE (bit 0): 上一个 chunk 是否不是 freed</li><li>IS_MMAPPED (bit 1): 该 chunk 是不是由 mmap 所分配出去的</li><li>NON_MAIN_ARENA (bit 2): 是否不属于 main arena</li></ul></li></ul></li><li>图</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518231653721.tp8j0nbjh9c.webp" alt="image-20220518231653721"></p><ul><li><p>free chunk</p><ul><li>prev_size</li><li>size</li><li>fd : point to next chunk（包括 bin）<ul><li>这里指的是链表中的 next chunk，而非连续存储的 chunk</li></ul></li><li>bk : point to last chunk（包括 bin）<ul><li>这里指的是链表中的 last chunk，而非连续存储的 chunk</li></ul></li><li>fd_nextsize : point to next large chunk（不包含 bin）</li><li>bk_nextsize : point to last large chunk（不包含 bin）</li></ul></li><li><p>freed chunk</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518232149688.8u5iweyyjt4.webp" alt="image-20220518232149688"></p><ul><li>top chunk</li><li>第一次 malloc 时就会将 heap 切成两块 chunk，第一个 chunk 就是分配出去的 chunk，剩下的空间被视为 top chunk，之后要是分配空间不足时会有 top chunk 切出去<ul><li>prev_size</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;一个写笔记的程序，下面是程序的一些功能。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blog-newcomer</title>
    <link href="http://im0use.github.io/2022/05/18/blog-newcomer/"/>
    <id>http://im0use.github.io/2022/05/18/blog-newcomer/</id>
    <published>2022-05-17T16:38:56.000Z</published>
    <updated>2022-05-18T11:52:09.810Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
