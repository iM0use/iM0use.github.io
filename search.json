[{"title":"HITCON train echo2","date":"2022-06-28T14:43:16.000Z","url":"/2022/06/28/echo2/","content":" 0x00 overviewstructureIt clears that there is a struct named O. member name has 24 bits size, send name from our input to 0-&gt;name checksec nice! Many knowledge can be learned through these process: (BOF, FSB, UAF). 0x01 Buffer overflow &amp; Shellcodeexploit conditionNX disabled overwrite 0x20 + 8(rbp) + shellcode But find id size only 8."},{"title":"mips-jr","date":"2022-06-18T14:43:16.000Z","url":"/2022/06/18/mips_jr/","content":" overviewInstructionThe Jump Register instruction causes the PC to jump to the contents of the first source register. syntax take a sample: JR $13 binary expression length Opcode: 6 rs: 5 rt: 5 rd: 5 shamt: 5 funct: 6 length_all = 6+5+5+5+5+6 = 32 if we make $13 register’s value equals to 789 in decmical, so we can find some information on $13 Register’s Address Register’s Address (Binary) Register’s Value Register’s Value (Hexadecimal) $13 01101 789 00000315 procedure This simple datapath is of a single-cycle nature. The instruction begins with the PC. PC value set to 00000114H The PC’s value, as well as a fixed value necessary to increase the PC by one cycle are passed into the ALU. The address of the instruction to be executed is passed to the IM. The Adder performs an arithmetic add operation to determine the next PC value. On the other hand, the instruction is decoded by the IM. IM: Fetching instruction from 00000114H: 000000 01101 00000 00000 00000 001000B Adder: Add 00000004H to 00000114H. The decoded instruction is split into different corresponding segments and sent to the RF. The function bits are sent to the ALU Control, and the opcode is sent to the Control Unit. The RF retrieves the data from the register required by the instruction. The CU identifies the type of instruction it is via the opcode. Control Unit: Opcode 000000B, Instruction: R type Read $13(01101B)’s value of 000001CDH The Adder sends the new PC value to the MUX. The RF sends the read data to the ALU and the MUX. new PC: 00000118H=00000004H+00000114H JRsel = 1B From the JRsel signal sent by the CU, the MUX selects the input from the RF to be the next PC value. The MUX sends the new PC value to the PC. source netdoor This source is very nice and interest. It make the abstract knowledge animated."},{"title":"HITCON-train-hacknote","date":"2022-06-18T14:43:16.000Z","url":"/2022/06/18/pwnable/","content":" calc 运行测试 借助测试可以发现一些规则，比如输入 0 会发生“prevent division by zero”信息，输入字母也不能计算，只输入字母会直接退出。 会出现一些干扰利用的东西，我们直接来到 eval ，这个函数承担计算的主要功能。简化一下。 *initpool 保存当前运算数个数。 假如当前运算符为+或-，读到上面第 16 行的 eval 需要满足什么条件？(unsigned int)(*(char *)(i + expr) - 48) &gt; 9 &amp;&amp; strcmp(prev_nums_str, \"0\") &amp;&amp; ( *(_BYTE *)(i + expr) &amp;&amp; (unsigned int)(*(char *)(i + 1 + expr) - 48) &gt; 9 ) &amp;&amp; operator[prev] &amp;&amp; ( *(_BYTE *)(i + expr) == '+' || *(_BYTE *)(i + expr) == '-') 现在指针（i + expr）指向的是运算符。 指针前面的数字（prev_nums_str）不能是 0，因为这里是 memcpy 复制过来的数字所以是字符串不能为 “0”。 指针的下一位（i + 1 + expr）不能是运算符，即两个运算符不能挨在一起。 operator 里存放有运算符 现在指针所指向运算符为 + 或者 - 然后应该是运算上一个数和上上一个数的运算公式。 如果是第一次遇到运算符，如何处理？ 如果是 “%*/“ 中的一个运算符且前一个运算符也是，eval(initpool, operator[prev]); operator[prev] = *(_BYTE *)(i + expr);，可以看见这种运算符用完就丢掉。 breakpoint： 0x8049130：prev_nums = atoi(prev_nums_str); 0x8049354：while ( prev &gt;= 0 ) eval(initpool, operator[prev--]); 0x804928A：operator[++prev] = *(_BYTE *)(i + expr);现”%*/“，上一位”+-“ 0x804922C：eval(nums, operator[prev]);连续非+-号 0x804922A：default 0x80491E3：operator[seqopr] = *(_BYTE *)(i + expr);存符号 "},{"title":"bash 简易操作","date":"2022-06-15T14:43:16.000Z","url":"/2022/06/15/shell/","content":" text color printf function choose string bool equal: ="},{"title":"syscall cheatsheet","date":"2022-06-14T14:43:16.000Z","url":"/2022/06/14/syscall-cheatsheet/","content":" 0x00 Syscall args arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5 arm r7 r0 r0 r1 r2 r3 r4 r5 arm64 x8 x0 x0 x1 x2 x3 x4 x5 x86 eax eax ebx ecx edx esi edi ebp x86_64 rax rax rdi rsi rdx r10 r8 r9 0x01 x86 NR syscall name references %eax arg0 (%ebx) arg1 (%ecx) arg2 (%edx) arg3 (%esi) arg4 (%edi) arg5 (%ebp) 0 restart_syscall man/ cs/ 0x00 - - - - - - 1 exit man/ cs/ 0x01 int error_code - - - - - 2 fork man/ cs/ 0x02 - - - - - - 3 read man/ cs/ 0x03 unsigned int fd char *buf size_t count - - - 4 write man/ cs/ 0x04 unsigned int fd const char *buf size_t count - - - 5 open man/ cs/ 0x05 const char *filename int flags umode_t mode - - - 6 close man/ cs/ 0x06 unsigned int fd - - - - - 7 waitpid man/ cs/ 0x07 pid_t pid int *stat_addr int options - - - 8 creat man/ cs/ 0x08 const char *pathname umode_t mode - - - - 9 link man/ cs/ 0x09 const char *oldname const char *newname - - - - 10 unlink man/ cs/ 0x0a const char *pathname - - - - - 11 execve man/ cs/ 0x0b const char *filename const char *const *argv const char *const *envp - - - 12 chdir man/ cs/ 0x0c const char *filename - - - - - 13 time man/ cs/ 0x0d time_t *tloc - - - - - 14 mknod man/ cs/ 0x0e const char *filename umode_t mode unsigned dev - - - 15 chmod man/ cs/ 0x0f const char *filename umode_t mode - - - - 16 lchown man/ cs/ 0x10 const char *filename uid_t user gid_t group - - - 17 break man/ cs/ 0x11 ? ? ? ? ? ? 18 oldstat man/ cs/ 0x12 ? ? ? ? ? ? 19 lseek man/ cs/ 0x13 unsigned int fd off_t offset unsigned int whence - - - 20 getpid man/ cs/ 0x14 - - - - - - 21 mount man/ cs/ 0x15 char *dev_name char *dir_name char *type unsigned long flags void *data - 22 umount man/ cs/ 0x16 char *name int flags - - - - 23 setuid man/ cs/ 0x17 uid_t uid - - - - - 24 getuid man/ cs/ 0x18 - - - - - - 25 stime man/ cs/ 0x19 time_t *tptr - - - - - 26 ptrace man/ cs/ 0x1a long request long pid unsigned long addr unsigned long data - - 27 alarm man/ cs/ 0x1b unsigned int seconds - - - - - 28 oldfstat man/ cs/ 0x1c ? ? ? ? ? ? 29 pause man/ cs/ 0x1d - - - - - - 30 utime man/ cs/ 0x1e char *filename struct utimbuf *times - - - - 31 stty man/ cs/ 0x1f ? ? ? ? ? ? 32 gtty man/ cs/ 0x20 ? ? ? ? ? ? 33 access man/ cs/ 0x21 const char *filename int mode - - - - 34 nice man/ cs/ 0x22 int increment - - - - - 35 ftime man/ cs/ 0x23 ? ? ? ? ? ? 36 sync man/ cs/ 0x24 - - - - - - 37 kill man/ cs/ 0x25 pid_t pid int sig - - - - 38 rename man/ cs/ 0x26 const char *oldname const char *newname - - - - 39 mkdir man/ cs/ 0x27 const char *pathname umode_t mode - - - - 40 rmdir man/ cs/ 0x28 const char *pathname - - - - - 41 dup man/ cs/ 0x29 unsigned int fildes - - - - - 42 pipe man/ cs/ 0x2a int *fildes - - - - - 43 times man/ cs/ 0x2b struct tms *tbuf - - - - - 44 prof man/ cs/ 0x2c ? ? ? ? ? ? 45 brk man/ cs/ 0x2d unsigned long brk - - - - - 46 setgid man/ cs/ 0x2e gid_t gid - - - - - 47 getgid man/ cs/ 0x2f - - - - - - 48 signal man/ cs/ 0x30 int sig __sighandler_t handler - - - - 49 geteuid man/ cs/ 0x31 - - - - - - 50 getegid man/ cs/ 0x32 - - - - - - 51 acct man/ cs/ 0x33 const char *name - - - - - 52 umount2 man/ cs/ 0x34 ? ? ? ? ? ? 53 lock man/ cs/ 0x35 ? ? ? ? ? ? 54 ioctl man/ cs/ 0x36 unsigned int fd unsigned int cmd unsigned long arg - - - 55 fcntl man/ cs/ 0x37 unsigned int fd unsigned int cmd unsigned long arg - - - 56 mpx man/ cs/ 0x38 ? ? ? ? ? ? 57 setpgid man/ cs/ 0x39 pid_t pid pid_t pgid - - - - 58 ulimit man/ cs/ 0x3a ? ? ? ? ? ? 59 oldolduname man/ cs/ 0x3b ? ? ? ? ? ? 60 umask man/ cs/ 0x3c int mask - - - - - 61 chroot man/ cs/ 0x3d const char *filename - - - - - 62 ustat man/ cs/ 0x3e unsigned dev struct ustat *ubuf - - - - 63 dup2 man/ cs/ 0x3f unsigned int oldfd unsigned int newfd - - - - 64 getppid man/ cs/ 0x40 - - - - - - 65 getpgrp man/ cs/ 0x41 - - - - - - 66 setsid man/ cs/ 0x42 - - - - - - 67 sigaction man/ cs/ 0x43 int const struct old_sigaction * struct old_sigaction * - - - 68 sgetmask man/ cs/ 0x44 - - - - - - 69 ssetmask man/ cs/ 0x45 int newmask - - - - - 70 setreuid man/ cs/ 0x46 uid_t ruid uid_t euid - - - - 71 setregid man/ cs/ 0x47 gid_t rgid gid_t egid - - - - 72 sigsuspend man/ cs/ 0x48 int unused1 int unused2 old_sigset_t mask - - - 73 sigpending man/ cs/ 0x49 old_sigset_t *uset - - - - - 74 sethostname man/ cs/ 0x4a char *name int len - - - - 75 setrlimit man/ cs/ 0x4b unsigned int resource struct rlimit *rlim - - - - 76 getrlimit man/ cs/ 0x4c unsigned int resource struct rlimit *rlim - - - - 77 getrusage man/ cs/ 0x4d int who struct rusage *ru - - - - 78 gettimeofday man/ cs/ 0x4e struct timeval *tv struct timezone *tz - - - - 79 settimeofday man/ cs/ 0x4f struct timeval *tv struct timezone *tz - - - - 80 getgroups man/ cs/ 0x50 int gidsetsize gid_t *grouplist - - - - 81 setgroups man/ cs/ 0x51 int gidsetsize gid_t *grouplist - - - - 82 select man/ cs/ 0x52 int n fd_set *inp fd_set *outp fd_set *exp struct timeval *tvp - 83 symlink man/ cs/ 0x53 const char *old const char *new - - - - 84 oldlstat man/ cs/ 0x54 ? ? ? ? ? ? 85 readlink man/ cs/ 0x55 const char *path char *buf int bufsiz - - - 86 uselib man/ cs/ 0x56 const char *library - - - - - 87 swapon man/ cs/ 0x57 const char *specialfile int swap_flags - - - - 88 reboot man/ cs/ 0x58 int magic1 int magic2 unsigned int cmd void *arg - - 89 readdir man/ cs/ 0x59 ? ? ? ? ? ? 90 mmap man/ cs/ 0x5a ? ? ? ? ? ? 91 munmap man/ cs/ 0x5b unsigned long addr size_t len - - - - 92 truncate man/ cs/ 0x5c const char *path long length - - - - 93 ftruncate man/ cs/ 0x5d unsigned int fd unsigned long length - - - - 94 fchmod man/ cs/ 0x5e unsigned int fd umode_t mode - - - - 95 fchown man/ cs/ 0x5f unsigned int fd uid_t user gid_t group - - - 96 getpriority man/ cs/ 0x60 int which int who - - - - 97 setpriority man/ cs/ 0x61 int which int who int niceval - - - 98 profil man/ cs/ 0x62 ? ? ? ? ? ? 99 statfs man/ cs/ 0x63 const char * path struct statfs *buf - - - - 100 fstatfs man/ cs/ 0x64 unsigned int fd struct statfs *buf - - - - 101 ioperm man/ cs/ 0x65 unsigned long from unsigned long num int on - - - 102 socketcall man/ cs/ 0x66 int call unsigned long *args - - - - 103 syslog man/ cs/ 0x67 int type char *buf int len - - - 104 setitimer man/ cs/ 0x68 int which struct itimerval *value struct itimerval *ovalue - - - 105 getitimer man/ cs/ 0x69 int which struct itimerval *value - - - - 106 stat man/ cs/ 0x6a const char *filename struct __old_kernel_stat *statbuf - - - - 107 lstat man/ cs/ 0x6b const char *filename struct __old_kernel_stat *statbuf - - - - 108 fstat man/ cs/ 0x6c unsigned int fd struct __old_kernel_stat *statbuf - - - - 109 olduname man/ cs/ 0x6d struct oldold_utsname * - - - - - 110 iopl man/ cs/ 0x6e ? ? ? ? ? ? 111 vhangup man/ cs/ 0x6f - - - - - - 112 idle man/ cs/ 0x70 ? ? ? ? ? ? 113 vm86old man/ cs/ 0x71 ? ? ? ? ? ? 114 wait4 man/ cs/ 0x72 pid_t pid int *stat_addr int options struct rusage *ru - - 115 swapoff man/ cs/ 0x73 const char *specialfile - - - - - 116 sysinfo man/ cs/ 0x74 struct sysinfo *info - - - - - 117 ipc man/ cs/ 0x75 unsigned int call int first unsigned long second unsigned long third void *ptr long fifth 118 fsync man/ cs/ 0x76 unsigned int fd - - - - - 119 sigreturn man/ cs/ 0x77 ? ? ? ? ? ? 120 clone man/ cs/ 0x78 unsigned long unsigned long int * int * unsigned long - 121 setdomainname man/ cs/ 0x79 char *name int len - - - - 122 uname man/ cs/ 0x7a struct old_utsname * - - - - - 123 modify_ldt man/ cs/ 0x7b ? ? ? ? ? ? 124 adjtimex man/ cs/ 0x7c struct __kernel_timex *txc_p - - - - - 125 mprotect man/ cs/ 0x7d unsigned long start size_t len unsigned long prot - - - 126 sigprocmask man/ cs/ 0x7e int how old_sigset_t *set old_sigset_t *oset - - - 127 create_module man/ cs/ 0x7f ? ? ? ? ? ? 128 init_module man/ cs/ 0x80 void *umod unsigned long len const char *uargs - - - 129 delete_module man/ cs/ 0x81 const char *name_user unsigned int flags - - - - 130 get_kernel_syms man/ cs/ 0x82 ? ? ? ? ? ? 131 quotactl man/ cs/ 0x83 unsigned int cmd const char *special qid_t id void *addr - - 132 getpgid man/ cs/ 0x84 pid_t pid - - - - - 133 fchdir man/ cs/ 0x85 unsigned int fd - - - - - 134 bdflush man/ cs/ 0x86 int func long data - - - - 135 sysfs man/ cs/ 0x87 int option unsigned long arg1 unsigned long arg2 - - - 136 personality man/ cs/ 0x88 unsigned int personality - - - - - 137 afs_syscall man/ cs/ 0x89 ? ? ? ? ? ? 138 setfsuid man/ cs/ 0x8a uid_t uid - - - - - 139 setfsgid man/ cs/ 0x8b gid_t gid - - - - - 140 _llseek man/ cs/ 0x8c ? ? ? ? ? ? 141 getdents man/ cs/ 0x8d unsigned int fd struct linux_dirent *dirent unsigned int count - - - 142 _newselect man/ cs/ 0x8e ? ? ? ? ? ? 143 flock man/ cs/ 0x8f unsigned int fd unsigned int cmd - - - - 144 msync man/ cs/ 0x90 unsigned long start size_t len int flags - - - 145 readv man/ cs/ 0x91 unsigned long fd const struct iovec *vec unsigned long vlen - - - 146 writev man/ cs/ 0x92 unsigned long fd const struct iovec *vec unsigned long vlen - - - 147 getsid man/ cs/ 0x93 pid_t pid - - - - - 148 fdatasync man/ cs/ 0x94 unsigned int fd - - - - - 149 _sysctl man/ cs/ 0x95 ? ? ? ? ? ? 150 mlock man/ cs/ 0x96 unsigned long start size_t len - - - - 151 munlock man/ cs/ 0x97 unsigned long start size_t len - - - - 152 mlockall man/ cs/ 0x98 int flags - - - - - 153 munlockall man/ cs/ 0x99 - - - - - - 154 sched_setparam man/ cs/ 0x9a pid_t pid struct sched_param *param - - - - 155 sched_getparam man/ cs/ 0x9b pid_t pid struct sched_param *param - - - - 156 sched_setscheduler man/ cs/ 0x9c pid_t pid int policy struct sched_param *param - - - 157 sched_getscheduler man/ cs/ 0x9d pid_t pid - - - - - 158 sched_yield man/ cs/ 0x9e - - - - - - 159 sched_get_priority_max man/ cs/ 0x9f int policy - - - - - 160 sched_get_priority_min man/ cs/ 0xa0 int policy - - - - - 161 sched_rr_get_interval man/ cs/ 0xa1 pid_t pid struct __kernel_timespec *interval - - - - 162 nanosleep man/ cs/ 0xa2 struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - - - 163 mremap man/ cs/ 0xa3 unsigned long addr unsigned long old_len unsigned long new_len unsigned long flags unsigned long new_addr - 164 setresuid man/ cs/ 0xa4 uid_t ruid uid_t euid uid_t suid - - - 165 getresuid man/ cs/ 0xa5 uid_t *ruid uid_t *euid uid_t *suid - - - 166 vm86 man/ cs/ 0xa6 ? ? ? ? ? ? 167 query_module man/ cs/ 0xa7 ? ? ? ? ? ? 168 poll man/ cs/ 0xa8 struct pollfd *ufds unsigned int nfds int timeout - - - 169 nfsservctl man/ cs/ 0xa9 ? ? ? ? ? ? 170 setresgid man/ cs/ 0xaa gid_t rgid gid_t egid gid_t sgid - - - 171 getresgid man/ cs/ 0xab gid_t *rgid gid_t *egid gid_t *sgid - - - 172 prctl man/ cs/ 0xac int option unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 173 rt_sigreturn man/ cs/ 0xad ? ? ? ? ? ? 174 rt_sigaction man/ cs/ 0xae int const struct sigaction * struct sigaction * size_t - - 175 rt_sigprocmask man/ cs/ 0xaf int how sigset_t *set sigset_t *oset size_t sigsetsize - - 176 rt_sigpending man/ cs/ 0xb0 sigset_t *set size_t sigsetsize - - - - 177 rt_sigtimedwait man/ cs/ 0xb1 const sigset_t *uthese siginfo_t *uinfo const struct __kernel_timespec *uts size_t sigsetsize - - 178 rt_sigqueueinfo man/ cs/ 0xb2 pid_t pid int sig siginfo_t *uinfo - - - 179 rt_sigsuspend man/ cs/ 0xb3 sigset_t *unewset size_t sigsetsize - - - - 180 pread64 man/ cs/ 0xb4 unsigned int fd char *buf size_t count loff_t pos - - 181 pwrite64 man/ cs/ 0xb5 unsigned int fd const char *buf size_t count loff_t pos - - 182 chown man/ cs/ 0xb6 const char *filename uid_t user gid_t group - - - 183 getcwd man/ cs/ 0xb7 char *buf unsigned long size - - - - 184 capget man/ cs/ 0xb8 cap_user_header_t header cap_user_data_t dataptr - - - - 185 capset man/ cs/ 0xb9 cap_user_header_t header const cap_user_data_t data - - - - 186 sigaltstack man/ cs/ 0xba const struct sigaltstack *uss struct sigaltstack *uoss - - - - 187 sendfile man/ cs/ 0xbb int out_fd int in_fd off_t *offset size_t count - - 188 getpmsg man/ cs/ 0xbc ? ? ? ? ? ? 189 putpmsg man/ cs/ 0xbd ? ? ? ? ? ? 190 vfork man/ cs/ 0xbe - - - - - - 191 ugetrlimit man/ cs/ 0xbf ? ? ? ? ? ? 192 mmap2 man/ cs/ 0xc0 ? ? ? ? ? ? 193 truncate64 man/ cs/ 0xc1 const char *path loff_t length - - - - 194 ftruncate64 man/ cs/ 0xc2 unsigned int fd loff_t length - - - - 195 stat64 man/ cs/ 0xc3 const char *filename struct stat64 *statbuf - - - - 196 lstat64 man/ cs/ 0xc4 const char *filename struct stat64 *statbuf - - - - 197 fstat64 man/ cs/ 0xc5 unsigned long fd struct stat64 *statbuf - - - - 198 lchown32 man/ cs/ 0xc6 ? ? ? ? ? ? 199 getuid32 man/ cs/ 0xc7 ? ? ? ? ? ? 200 getgid32 man/ cs/ 0xc8 ? ? ? ? ? ? 201 geteuid32 man/ cs/ 0xc9 ? ? ? ? ? ? 202 getegid32 man/ cs/ 0xca ? ? ? ? ? ? 203 setreuid32 man/ cs/ 0xcb ? ? ? ? ? ? 204 setregid32 man/ cs/ 0xcc ? ? ? ? ? ? 205 getgroups32 man/ cs/ 0xcd ? ? ? ? ? ? 206 setgroups32 man/ cs/ 0xce ? ? ? ? ? ? 207 fchown32 man/ cs/ 0xcf ? ? ? ? ? ? 208 setresuid32 man/ cs/ 0xd0 ? ? ? ? ? ? 209 getresuid32 man/ cs/ 0xd1 ? ? ? ? ? ? 210 setresgid32 man/ cs/ 0xd2 ? ? ? ? ? ? 211 getresgid32 man/ cs/ 0xd3 ? ? ? ? ? ? 212 chown32 man/ cs/ 0xd4 ? ? ? ? ? ? 213 setuid32 man/ cs/ 0xd5 ? ? ? ? ? ? 214 setgid32 man/ cs/ 0xd6 ? ? ? ? ? ? 215 setfsuid32 man/ cs/ 0xd7 ? ? ? ? ? ? 216 setfsgid32 man/ cs/ 0xd8 ? ? ? ? ? ? 217 pivot_root man/ cs/ 0xd9 const char *new_root const char *put_old - - - - 218 mincore man/ cs/ 0xda unsigned long start size_t len unsigned char * vec - - - 219 madvise man/ cs/ 0xdb unsigned long start size_t len int behavior - - - 220 getdents64 man/ cs/ 0xdc unsigned int fd struct linux_dirent64 *dirent unsigned int count - - - 221 fcntl64 man/ cs/ 0xdd unsigned int fd unsigned int cmd unsigned long arg - - - 222 not implemented 0xde 223 not implemented 0xdf 224 gettid man/ cs/ 0xe0 - - - - - - 225 readahead man/ cs/ 0xe1 int fd loff_t offset size_t count - - - 226 setxattr man/ cs/ 0xe2 const char *path const char *name const void *value size_t size int flags - 227 lsetxattr man/ cs/ 0xe3 const char *path const char *name const void *value size_t size int flags - 228 fsetxattr man/ cs/ 0xe4 int fd const char *name const void *value size_t size int flags - 229 getxattr man/ cs/ 0xe5 const char *path const char *name void *value size_t size - - 230 lgetxattr man/ cs/ 0xe6 const char *path const char *name void *value size_t size - - 231 fgetxattr man/ cs/ 0xe7 int fd const char *name void *value size_t size - - 232 listxattr man/ cs/ 0xe8 const char *path char *list size_t size - - - 233 llistxattr man/ cs/ 0xe9 const char *path char *list size_t size - - - 234 flistxattr man/ cs/ 0xea int fd char *list size_t size - - - 235 removexattr man/ cs/ 0xeb const char *path const char *name - - - - 236 lremovexattr man/ cs/ 0xec const char *path const char *name - - - - 237 fremovexattr man/ cs/ 0xed int fd const char *name - - - - 238 tkill man/ cs/ 0xee pid_t pid int sig - - - - 239 sendfile64 man/ cs/ 0xef int out_fd int in_fd loff_t *offset size_t count - - 240 futex man/ cs/ 0xf0 u32 *uaddr int op u32 val struct __kernel_timespec *utime u32 *uaddr2 u32 val3 241 sched_setaffinity man/ cs/ 0xf1 pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 242 sched_getaffinity man/ cs/ 0xf2 pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 243 set_thread_area man/ cs/ 0xf3 ? ? ? ? ? ? 244 get_thread_area man/ cs/ 0xf4 ? ? ? ? ? ? 245 io_setup man/ cs/ 0xf5 unsigned nr_reqs aio_context_t *ctx - - - - 246 io_destroy man/ cs/ 0xf6 aio_context_t ctx - - - - - 247 io_getevents man/ cs/ 0xf7 aio_context_t ctx_id long min_nr long nr struct io_event *events struct __kernel_timespec *timeout - 248 io_submit man/ cs/ 0xf8 aio_context_t long struct iocb * * - - - 249 io_cancel man/ cs/ 0xf9 aio_context_t ctx_id struct iocb *iocb struct io_event *result - - - 250 fadvise64 man/ cs/ 0xfa int fd loff_t offset size_t len int advice - - 251 not implemented 0xfb 252 exit_group man/ cs/ 0xfc int error_code - - - - - 253 lookup_dcookie man/ cs/ 0xfd u64 cookie64 char *buf size_t len - - - 254 epoll_create man/ cs/ 0xfe int size - - - - - 255 epoll_ctl man/ cs/ 0xff int epfd int op int fd struct epoll_event *event - - 256 epoll_wait man/ cs/ 0x100 int epfd struct epoll_event *events int maxevents int timeout - - 257 remap_file_pages man/ cs/ 0x101 unsigned long start unsigned long size unsigned long prot unsigned long pgoff unsigned long flags - 258 set_tid_address man/ cs/ 0x102 int *tidptr - - - - - 259 timer_create man/ cs/ 0x103 clockid_t which_clock struct sigevent *timer_event_spec timer_t * created_timer_id - - - 260 timer_settime man/ cs/ 0x104 timer_t timer_id int flags const struct __kernel_itimerspec *new_setting struct __kernel_itimerspec *old_setting - - 261 timer_gettime man/ cs/ 0x105 timer_t timer_id struct __kernel_itimerspec *setting - - - - 262 timer_getoverrun man/ cs/ 0x106 timer_t timer_id - - - - - 263 timer_delete man/ cs/ 0x107 timer_t timer_id - - - - - 264 clock_settime man/ cs/ 0x108 clockid_t which_clock const struct __kernel_timespec *tp - - - - 265 clock_gettime man/ cs/ 0x109 clockid_t which_clock struct __kernel_timespec *tp - - - - 266 clock_getres man/ cs/ 0x10a clockid_t which_clock struct __kernel_timespec *tp - - - - 267 clock_nanosleep man/ cs/ 0x10b clockid_t which_clock int flags const struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - 268 statfs64 man/ cs/ 0x10c const char *path size_t sz struct statfs64 *buf - - - 269 fstatfs64 man/ cs/ 0x10d unsigned int fd size_t sz struct statfs64 *buf - - - 270 tgkill man/ cs/ 0x10e pid_t tgid pid_t pid int sig - - - 271 utimes man/ cs/ 0x10f char *filename struct timeval *utimes - - - - 272 fadvise64_64 man/ cs/ 0x110 int fd loff_t offset loff_t len int advice - - 273 vserver man/ cs/ 0x111 ? ? ? ? ? ? 274 mbind man/ cs/ 0x112 unsigned long start unsigned long len unsigned long mode const unsigned long *nmask unsigned long maxnode unsigned flags 275 get_mempolicy man/ cs/ 0x113 int *policy unsigned long *nmask unsigned long maxnode unsigned long addr unsigned long flags - 276 set_mempolicy man/ cs/ 0x114 int mode const unsigned long *nmask unsigned long maxnode - - - 277 mq_open man/ cs/ 0x115 const char *name int oflag umode_t mode struct mq_attr *attr - - 278 mq_unlink man/ cs/ 0x116 const char *name - - - - - 279 mq_timedsend man/ cs/ 0x117 mqd_t mqdes const char *msg_ptr size_t msg_len unsigned int msg_prio const struct __kernel_timespec *abs_timeout - 280 mq_timedreceive man/ cs/ 0x118 mqd_t mqdes char *msg_ptr size_t msg_len unsigned int *msg_prio const struct __kernel_timespec *abs_timeout - 281 mq_notify man/ cs/ 0x119 mqd_t mqdes const struct sigevent *notification - - - - 282 mq_getsetattr man/ cs/ 0x11a mqd_t mqdes const struct mq_attr *mqstat struct mq_attr *omqstat - - - 283 kexec_load man/ cs/ 0x11b unsigned long entry unsigned long nr_segments struct kexec_segment *segments unsigned long flags - - 284 waitid man/ cs/ 0x11c int which pid_t pid struct siginfo *infop int options struct rusage *ru - 285 not implemented 0x11d 286 add_key man/ cs/ 0x11e const char *_type const char *_description const void *_payload size_t plen key_serial_t destringid - 287 request_key man/ cs/ 0x11f const char *_type const char *_description const char *_callout_info key_serial_t destringid - - 288 keyctl man/ cs/ 0x120 int cmd unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 289 ioprio_set man/ cs/ 0x121 int which int who int ioprio - - - 290 ioprio_get man/ cs/ 0x122 int which int who - - - - 291 inotify_init man/ cs/ 0x123 - - - - - - 292 inotify_add_watch man/ cs/ 0x124 int fd const char *path u32 mask - - - 293 inotify_rm_watch man/ cs/ 0x125 int fd __s32 wd - - - - 294 migrate_pages man/ cs/ 0x126 pid_t pid unsigned long maxnode const unsigned long *from const unsigned long *to - - 295 openat man/ cs/ 0x127 int dfd const char *filename int flags umode_t mode - - 296 mkdirat man/ cs/ 0x128 int dfd const char * pathname umode_t mode - - - 297 mknodat man/ cs/ 0x129 int dfd const char * filename umode_t mode unsigned dev - - 298 fchownat man/ cs/ 0x12a int dfd const char *filename uid_t user gid_t group int flag - 299 futimesat man/ cs/ 0x12b int dfd const char *filename struct timeval *utimes - - - 300 fstatat64 man/ cs/ 0x12c int dfd const char *filename struct stat64 *statbuf int flag - - 301 unlinkat man/ cs/ 0x12d int dfd const char * pathname int flag - - - 302 renameat man/ cs/ 0x12e int olddfd const char * oldname int newdfd const char * newname - - 303 linkat man/ cs/ 0x12f int olddfd const char *oldname int newdfd const char *newname int flags - 304 symlinkat man/ cs/ 0x130 const char * oldname int newdfd const char * newname - - - 305 readlinkat man/ cs/ 0x131 int dfd const char *path char *buf int bufsiz - - 306 fchmodat man/ cs/ 0x132 int dfd const char * filename umode_t mode - - - 307 faccessat man/ cs/ 0x133 int dfd const char *filename int mode - - - 308 pselect6 man/ cs/ 0x134 int fd_set * fd_set * fd_set * struct __kernel_timespec * void * 309 ppoll man/ cs/ 0x135 struct pollfd * unsigned int struct __kernel_timespec * const sigset_t * size_t - 310 unshare man/ cs/ 0x136 unsigned long unshare_flags - - - - - 311 set_robust_list man/ cs/ 0x137 struct robust_list_head *head size_t len - - - - 312 get_robust_list man/ cs/ 0x138 int pid struct robust_list_head * *head_ptr size_t *len_ptr - - - 313 splice man/ cs/ 0x139 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 314 sync_file_range man/ cs/ 0x13a int fd loff_t offset loff_t nbytes unsigned int flags - - 315 tee man/ cs/ 0x13b int fdin int fdout size_t len unsigned int flags - - 316 vmsplice man/ cs/ 0x13c int fd const struct iovec *iov unsigned long nr_segs unsigned int flags - - 317 move_pages man/ cs/ 0x13d pid_t pid unsigned long nr_pages const void * *pages const int *nodes int *status int flags 318 getcpu man/ cs/ 0x13e unsigned *cpu unsigned *node struct getcpu_cache *cache - - - 319 epoll_pwait man/ cs/ 0x13f int epfd struct epoll_event *events int maxevents int timeout const sigset_t *sigmask size_t sigsetsize 320 utimensat man/ cs/ 0x140 int dfd const char *filename struct __kernel_timespec *utimes int flags - - 321 signalfd man/ cs/ 0x141 int ufd sigset_t *user_mask size_t sizemask - - - 322 timerfd_create man/ cs/ 0x142 int clockid int flags - - - - 323 eventfd man/ cs/ 0x143 unsigned int count - - - - - 324 fallocate man/ cs/ 0x144 int fd int mode loff_t offset loff_t len - - 325 timerfd_settime man/ cs/ 0x145 int ufd int flags const struct __kernel_itimerspec *utmr struct __kernel_itimerspec *otmr - - 326 timerfd_gettime man/ cs/ 0x146 int ufd struct __kernel_itimerspec *otmr - - - - 327 signalfd4 man/ cs/ 0x147 int ufd sigset_t *user_mask size_t sizemask int flags - - 328 eventfd2 man/ cs/ 0x148 unsigned int count int flags - - - - 329 epoll_create1 man/ cs/ 0x149 int flags - - - - - 330 dup3 man/ cs/ 0x14a unsigned int oldfd unsigned int newfd int flags - - - 331 pipe2 man/ cs/ 0x14b int *fildes int flags - - - - 332 inotify_init1 man/ cs/ 0x14c int flags - - - - - 333 preadv man/ cs/ 0x14d unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 334 pwritev man/ cs/ 0x14e unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 335 rt_tgsigqueueinfo man/ cs/ 0x14f pid_t tgid pid_t pid int sig siginfo_t *uinfo - - 336 perf_event_open man/ cs/ 0x150 struct perf_event_attr *attr_uptr pid_t pid int cpu int group_fd unsigned long flags - 337 recvmmsg man/ cs/ 0x151 int fd struct mmsghdr *msg unsigned int vlen unsigned flags struct __kernel_timespec *timeout - 338 fanotify_init man/ cs/ 0x152 unsigned int flags unsigned int event_f_flags - - - - 339 fanotify_mark man/ cs/ 0x153 int fanotify_fd unsigned int flags u64 mask int fd const char *pathname - 340 prlimit64 man/ cs/ 0x154 pid_t pid unsigned int resource const struct rlimit64 *new_rlim struct rlimit64 *old_rlim - - 341 name_to_handle_at man/ cs/ 0x155 int dfd const char *name struct file_handle *handle int *mnt_id int flag - 342 open_by_handle_at man/ cs/ 0x156 int mountdirfd struct file_handle *handle int flags - - - 343 clock_adjtime man/ cs/ 0x157 clockid_t which_clock struct __kernel_timex *tx - - - - 344 syncfs man/ cs/ 0x158 int fd - - - - - 345 sendmmsg man/ cs/ 0x159 int fd struct mmsghdr *msg unsigned int vlen unsigned flags - - 346 setns man/ cs/ 0x15a int fd int nstype - - - - 347 process_vm_readv man/ cs/ 0x15b pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 348 process_vm_writev man/ cs/ 0x15c pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 349 kcmp man/ cs/ 0x15d pid_t pid1 pid_t pid2 int type unsigned long idx1 unsigned long idx2 - 350 finit_module man/ cs/ 0x15e int fd const char *uargs int flags - - - 351 sched_setattr man/ cs/ 0x15f pid_t pid struct sched_attr *attr unsigned int flags - - - 352 sched_getattr man/ cs/ 0x160 pid_t pid struct sched_attr *attr unsigned int size unsigned int flags - - 353 renameat2 man/ cs/ 0x161 int olddfd const char *oldname int newdfd const char *newname unsigned int flags - 354 seccomp man/ cs/ 0x162 unsigned int op unsigned int flags void *uargs - - - 355 getrandom man/ cs/ 0x163 char *buf size_t count unsigned int flags - - - 356 memfd_create man/ cs/ 0x164 const char *uname_ptr unsigned int flags - - - - 357 bpf man/ cs/ 0x165 int cmd union bpf_attr *attr unsigned int size - - - 358 execveat man/ cs/ 0x166 int dfd const char *filename const char *const *argv const char *const *envp int flags - 359 socket man/ cs/ 0x167 int int int - - - 360 socketpair man/ cs/ 0x168 int int int int * - - 361 bind man/ cs/ 0x169 int struct sockaddr * int - - - 362 connect man/ cs/ 0x16a int struct sockaddr * int - - - 363 listen man/ cs/ 0x16b int int - - - - 364 accept4 man/ cs/ 0x16c int struct sockaddr * int * int - - 365 getsockopt man/ cs/ 0x16d int fd int level int optname char *optval int *optlen - 366 setsockopt man/ cs/ 0x16e int fd int level int optname char *optval int optlen - 367 getsockname man/ cs/ 0x16f int struct sockaddr * int * - - - 368 getpeername man/ cs/ 0x170 int struct sockaddr * int * - - - 369 sendto man/ cs/ 0x171 int void * size_t unsigned struct sockaddr * int 370 sendmsg man/ cs/ 0x172 int fd struct user_msghdr *msg unsigned flags - - - 371 recvfrom man/ cs/ 0x173 int void * size_t unsigned struct sockaddr * int * 372 recvmsg man/ cs/ 0x174 int fd struct user_msghdr *msg unsigned flags - - - 373 shutdown man/ cs/ 0x175 int int - - - - 374 userfaultfd man/ cs/ 0x176 int flags - - - - - 375 membarrier man/ cs/ 0x177 int cmd int flags - - - - 376 mlock2 man/ cs/ 0x178 unsigned long start size_t len int flags - - - 377 copy_file_range man/ cs/ 0x179 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 378 preadv2 man/ cs/ 0x17a unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 379 pwritev2 man/ cs/ 0x17b unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 380 pkey_mprotect man/ cs/ 0x17c unsigned long start size_t len unsigned long prot int pkey - - 381 pkey_alloc man/ cs/ 0x17d unsigned long flags unsigned long init_val - - - - 382 pkey_free man/ cs/ 0x17e int pkey - - - - - 383 statx man/ cs/ 0x17f int dfd const char *path unsigned flags unsigned mask struct statx *buffer - 384 arch_prctl man/ cs/ 0x180 ? ? ? ? ? ? 0x02 x86_64 NR %rax arg0 (%rdi) arg1 (%rsi) arg2 (%rdx) arg3 (%r10) arg4 (%r8) arg5 (%r9) 0 read man/ cs/ 0x00 unsigned int fd char *buf size_t count - - - 1 write man/ cs/ 0x01 unsigned int fd const char *buf size_t count - - - 2 open man/ cs/ 0x02 const char *filename int flags umode_t mode - - - 3 close man/ cs/ 0x03 unsigned int fd - - - - - 4 stat man/ cs/ 0x04 const char *filename struct __old_kernel_stat *statbuf - - - - 5 fstat man/ cs/ 0x05 unsigned int fd struct __old_kernel_stat *statbuf - - - - 6 lstat man/ cs/ 0x06 const char *filename struct __old_kernel_stat *statbuf - - - - 7 poll man/ cs/ 0x07 struct pollfd *ufds unsigned int nfds int timeout - - - 8 lseek man/ cs/ 0x08 unsigned int fd off_t offset unsigned int whence - - - 9 mmap man/ cs/ 0x09 ? ? ? ? ? ? 10 mprotect man/ cs/ 0x0a unsigned long start size_t len unsigned long prot - - - 11 munmap man/ cs/ 0x0b unsigned long addr size_t len - - - - 12 brk man/ cs/ 0x0c unsigned long brk - - - - - 13 rt_sigaction man/ cs/ 0x0d int const struct sigaction * struct sigaction * size_t - - 14 rt_sigprocmask man/ cs/ 0x0e int how sigset_t *set sigset_t *oset size_t sigsetsize - - 15 rt_sigreturn man/ cs/ 0x0f ? ? ? ? ? ? 16 ioctl man/ cs/ 0x10 unsigned int fd unsigned int cmd unsigned long arg - - - 17 pread64 man/ cs/ 0x11 unsigned int fd char *buf size_t count loff_t pos - - 18 pwrite64 man/ cs/ 0x12 unsigned int fd const char *buf size_t count loff_t pos - - 19 readv man/ cs/ 0x13 unsigned long fd const struct iovec *vec unsigned long vlen - - - 20 writev man/ cs/ 0x14 unsigned long fd const struct iovec *vec unsigned long vlen - - - 21 access man/ cs/ 0x15 const char *filename int mode - - - - 22 pipe man/ cs/ 0x16 int *fildes - - - - - 23 select man/ cs/ 0x17 int n fd_set *inp fd_set *outp fd_set *exp struct timeval *tvp - 24 sched_yield man/ cs/ 0x18 - - - - - - 25 mremap man/ cs/ 0x19 unsigned long addr unsigned long old_len unsigned long new_len unsigned long flags unsigned long new_addr - 26 msync man/ cs/ 0x1a unsigned long start size_t len int flags - - - 27 mincore man/ cs/ 0x1b unsigned long start size_t len unsigned char * vec - - - 28 madvise man/ cs/ 0x1c unsigned long start size_t len int behavior - - - 29 shmget man/ cs/ 0x1d key_t key size_t size int flag - - - 30 shmat man/ cs/ 0x1e int shmid char *shmaddr int shmflg - - - 31 shmctl man/ cs/ 0x1f int shmid int cmd struct shmid_ds *buf - - - 32 dup man/ cs/ 0x20 unsigned int fildes - - - - - 33 dup2 man/ cs/ 0x21 unsigned int oldfd unsigned int newfd - - - - 34 pause man/ cs/ 0x22 - - - - - - 35 nanosleep man/ cs/ 0x23 struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - - - 36 getitimer man/ cs/ 0x24 int which struct itimerval *value - - - - 37 alarm man/ cs/ 0x25 unsigned int seconds - - - - - 38 setitimer man/ cs/ 0x26 int which struct itimerval *value struct itimerval *ovalue - - - 39 getpid man/ cs/ 0x27 - - - - - - 40 sendfile man/ cs/ 0x28 int out_fd int in_fd off_t *offset size_t count - - 41 socket man/ cs/ 0x29 int int int - - - 42 connect man/ cs/ 0x2a int struct sockaddr * int - - - 43 accept man/ cs/ 0x2b int struct sockaddr * int * - - - 44 sendto man/ cs/ 0x2c int void * size_t unsigned struct sockaddr * int 45 recvfrom man/ cs/ 0x2d int void * size_t unsigned struct sockaddr * int * 46 sendmsg man/ cs/ 0x2e int fd struct user_msghdr *msg unsigned flags - - - 47 recvmsg man/ cs/ 0x2f int fd struct user_msghdr *msg unsigned flags - - - 48 shutdown man/ cs/ 0x30 int int - - - - 49 bind man/ cs/ 0x31 int struct sockaddr * int - - - 50 listen man/ cs/ 0x32 int int - - - - 51 getsockname man/ cs/ 0x33 int struct sockaddr * int * - - - 52 getpeername man/ cs/ 0x34 int struct sockaddr * int * - - - 53 socketpair man/ cs/ 0x35 int int int int * - - 54 setsockopt man/ cs/ 0x36 int fd int level int optname char *optval int optlen - 55 getsockopt man/ cs/ 0x37 int fd int level int optname char *optval int *optlen - 56 clone man/ cs/ 0x38 unsigned long unsigned long int * int * unsigned long - 57 fork man/ cs/ 0x39 - - - - - - 58 vfork man/ cs/ 0x3a - - - - - - 59 execve man/ cs/ 0x3b const char *filename const char *const *argv const char *const *envp - - - 60 exit man/ cs/ 0x3c int error_code - - - - - 61 wait4 man/ cs/ 0x3d pid_t pid int *stat_addr int options struct rusage *ru - - 62 kill man/ cs/ 0x3e pid_t pid int sig - - - - 63 uname man/ cs/ 0x3f struct old_utsname * - - - - - 64 semget man/ cs/ 0x40 key_t key int nsems int semflg - - - 65 semop man/ cs/ 0x41 int semid struct sembuf *sops unsigned nsops - - - 66 semctl man/ cs/ 0x42 int semid int semnum int cmd unsigned long arg - - 67 shmdt man/ cs/ 0x43 char *shmaddr - - - - - 68 msgget man/ cs/ 0x44 key_t key int msgflg - - - - 69 msgsnd man/ cs/ 0x45 int msqid struct msgbuf *msgp size_t msgsz int msgflg - - 70 msgrcv man/ cs/ 0x46 int msqid struct msgbuf *msgp size_t msgsz long msgtyp int msgflg - 71 msgctl man/ cs/ 0x47 int msqid int cmd struct msqid_ds *buf - - - 72 fcntl man/ cs/ 0x48 unsigned int fd unsigned int cmd unsigned long arg - - - 73 flock man/ cs/ 0x49 unsigned int fd unsigned int cmd - - - - 74 fsync man/ cs/ 0x4a unsigned int fd - - - - - 75 fdatasync man/ cs/ 0x4b unsigned int fd - - - - - 76 truncate man/ cs/ 0x4c const char *path long length - - - - 77 ftruncate man/ cs/ 0x4d unsigned int fd unsigned long length - - - - 78 getdents man/ cs/ 0x4e unsigned int fd struct linux_dirent *dirent unsigned int count - - - 79 getcwd man/ cs/ 0x4f char *buf unsigned long size - - - - 80 chdir man/ cs/ 0x50 const char *filename - - - - - 81 fchdir man/ cs/ 0x51 unsigned int fd - - - - - 82 rename man/ cs/ 0x52 const char *oldname const char *newname - - - - 83 mkdir man/ cs/ 0x53 const char *pathname umode_t mode - - - - 84 rmdir man/ cs/ 0x54 const char *pathname - - - - - 85 creat man/ cs/ 0x55 const char *pathname umode_t mode - - - - 86 link man/ cs/ 0x56 const char *oldname const char *newname - - - - 87 unlink man/ cs/ 0x57 const char *pathname - - - - - 88 symlink man/ cs/ 0x58 const char *old const char *new - - - - 89 readlink man/ cs/ 0x59 const char *path char *buf int bufsiz - - - 90 chmod man/ cs/ 0x5a const char *filename umode_t mode - - - - 91 fchmod man/ cs/ 0x5b unsigned int fd umode_t mode - - - - 92 chown man/ cs/ 0x5c const char *filename uid_t user gid_t group - - - 93 fchown man/ cs/ 0x5d unsigned int fd uid_t user gid_t group - - - 94 lchown man/ cs/ 0x5e const char *filename uid_t user gid_t group - - - 95 umask man/ cs/ 0x5f int mask - - - - - 96 gettimeofday man/ cs/ 0x60 struct timeval *tv struct timezone *tz - - - - 97 getrlimit man/ cs/ 0x61 unsigned int resource struct rlimit *rlim - - - - 98 getrusage man/ cs/ 0x62 int who struct rusage *ru - - - - 99 sysinfo man/ cs/ 0x63 struct sysinfo *info - - - - - 100 times man/ cs/ 0x64 struct tms *tbuf - - - - - 101 ptrace man/ cs/ 0x65 long request long pid unsigned long addr unsigned long data - - 102 getuid man/ cs/ 0x66 - - - - - - 103 syslog man/ cs/ 0x67 int type char *buf int len - - - 104 getgid man/ cs/ 0x68 - - - - - - 105 setuid man/ cs/ 0x69 uid_t uid - - - - - 106 setgid man/ cs/ 0x6a gid_t gid - - - - - 107 geteuid man/ cs/ 0x6b - - - - - - 108 getegid man/ cs/ 0x6c - - - - - - 109 setpgid man/ cs/ 0x6d pid_t pid pid_t pgid - - - - 110 getppid man/ cs/ 0x6e - - - - - - 111 getpgrp man/ cs/ 0x6f - - - - - - 112 setsid man/ cs/ 0x70 - - - - - - 113 setreuid man/ cs/ 0x71 uid_t ruid uid_t euid - - - - 114 setregid man/ cs/ 0x72 gid_t rgid gid_t egid - - - - 115 getgroups man/ cs/ 0x73 int gidsetsize gid_t *grouplist - - - - 116 setgroups man/ cs/ 0x74 int gidsetsize gid_t *grouplist - - - - 117 setresuid man/ cs/ 0x75 uid_t ruid uid_t euid uid_t suid - - - 118 getresuid man/ cs/ 0x76 uid_t *ruid uid_t *euid uid_t *suid - - - 119 setresgid man/ cs/ 0x77 gid_t rgid gid_t egid gid_t sgid - - - 120 getresgid man/ cs/ 0x78 gid_t *rgid gid_t *egid gid_t *sgid - - - 121 getpgid man/ cs/ 0x79 pid_t pid - - - - - 122 setfsuid man/ cs/ 0x7a uid_t uid - - - - - 123 setfsgid man/ cs/ 0x7b gid_t gid - - - - - 124 getsid man/ cs/ 0x7c pid_t pid - - - - - 125 capget man/ cs/ 0x7d cap_user_header_t header cap_user_data_t dataptr - - - - 126 capset man/ cs/ 0x7e cap_user_header_t header const cap_user_data_t data - - - - 127 rt_sigpending man/ cs/ 0x7f sigset_t *set size_t sigsetsize - - - - 128 rt_sigtimedwait man/ cs/ 0x80 const sigset_t *uthese siginfo_t *uinfo const struct __kernel_timespec *uts size_t sigsetsize - - 129 rt_sigqueueinfo man/ cs/ 0x81 pid_t pid int sig siginfo_t *uinfo - - - 130 rt_sigsuspend man/ cs/ 0x82 sigset_t *unewset size_t sigsetsize - - - - 131 sigaltstack man/ cs/ 0x83 const struct sigaltstack *uss struct sigaltstack *uoss - - - - 132 utime man/ cs/ 0x84 char *filename struct utimbuf *times - - - - 133 mknod man/ cs/ 0x85 const char *filename umode_t mode unsigned dev - - - 134 uselib man/ cs/ 0x86 const char *library - - - - - 135 personality man/ cs/ 0x87 unsigned int personality - - - - - 136 ustat man/ cs/ 0x88 unsigned dev struct ustat *ubuf - - - - 137 statfs man/ cs/ 0x89 const char * path struct statfs *buf - - - - 138 fstatfs man/ cs/ 0x8a unsigned int fd struct statfs *buf - - - - 139 sysfs man/ cs/ 0x8b int option unsigned long arg1 unsigned long arg2 - - - 140 getpriority man/ cs/ 0x8c int which int who - - - - 141 setpriority man/ cs/ 0x8d int which int who int niceval - - - 142 sched_setparam man/ cs/ 0x8e pid_t pid struct sched_param *param - - - - 143 sched_getparam man/ cs/ 0x8f pid_t pid struct sched_param *param - - - - 144 sched_setscheduler man/ cs/ 0x90 pid_t pid int policy struct sched_param *param - - - 145 sched_getscheduler man/ cs/ 0x91 pid_t pid - - - - - 146 sched_get_priority_max man/ cs/ 0x92 int policy - - - - - 147 sched_get_priority_min man/ cs/ 0x93 int policy - - - - - 148 sched_rr_get_interval man/ cs/ 0x94 pid_t pid struct __kernel_timespec *interval - - - - 149 mlock man/ cs/ 0x95 unsigned long start size_t len - - - - 150 munlock man/ cs/ 0x96 unsigned long start size_t len - - - - 151 mlockall man/ cs/ 0x97 int flags - - - - - 152 munlockall man/ cs/ 0x98 - - - - - - 153 vhangup man/ cs/ 0x99 - - - - - - 154 modify_ldt man/ cs/ 0x9a ? ? ? ? ? ? 155 pivot_root man/ cs/ 0x9b const char *new_root const char *put_old - - - - 156 _sysctl man/ cs/ 0x9c ? ? ? ? ? ? 157 prctl man/ cs/ 0x9d int option unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 158 arch_prctl man/ cs/ 0x9e ? ? ? ? ? ? 159 adjtimex man/ cs/ 0x9f struct __kernel_timex *txc_p - - - - - 160 setrlimit man/ cs/ 0xa0 unsigned int resource struct rlimit *rlim - - - - 161 chroot man/ cs/ 0xa1 const char *filename - - - - - 162 sync man/ cs/ 0xa2 - - - - - - 163 acct man/ cs/ 0xa3 const char *name - - - - - 164 settimeofday man/ cs/ 0xa4 struct timeval *tv struct timezone *tz - - - - 165 mount man/ cs/ 0xa5 char *dev_name char *dir_name char *type unsigned long flags void *data - 166 umount2 man/ cs/ 0xa6 ? ? ? ? ? ? 167 swapon man/ cs/ 0xa7 const char *specialfile int swap_flags - - - - 168 swapoff man/ cs/ 0xa8 const char *specialfile - - - - - 169 reboot man/ cs/ 0xa9 int magic1 int magic2 unsigned int cmd void *arg - - 170 sethostname man/ cs/ 0xaa char *name int len - - - - 171 setdomainname man/ cs/ 0xab char *name int len - - - - 172 iopl man/ cs/ 0xac ? ? ? ? ? ? 173 ioperm man/ cs/ 0xad unsigned long from unsigned long num int on - - - 174 create_module man/ cs/ 0xae ? ? ? ? ? ? 175 init_module man/ cs/ 0xaf void *umod unsigned long len const char *uargs - - - 176 delete_module man/ cs/ 0xb0 const char *name_user unsigned int flags - - - - 177 get_kernel_syms man/ cs/ 0xb1 ? ? ? ? ? ? 178 query_module man/ cs/ 0xb2 ? ? ? ? ? ? 179 quotactl man/ cs/ 0xb3 unsigned int cmd const char *special qid_t id void *addr - - 180 nfsservctl man/ cs/ 0xb4 ? ? ? ? ? ? 181 getpmsg man/ cs/ 0xb5 ? ? ? ? ? ? 182 putpmsg man/ cs/ 0xb6 ? ? ? ? ? ? 183 afs_syscall man/ cs/ 0xb7 ? ? ? ? ? ? 184 tuxcall man/ cs/ 0xb8 ? ? ? ? ? ? 185 security man/ cs/ 0xb9 ? ? ? ? ? ? 186 gettid man/ cs/ 0xba - - - - - - 187 readahead man/ cs/ 0xbb int fd loff_t offset size_t count - - - 188 setxattr man/ cs/ 0xbc const char *path const char *name const void *value size_t size int flags - 189 lsetxattr man/ cs/ 0xbd const char *path const char *name const void *value size_t size int flags - 190 fsetxattr man/ cs/ 0xbe int fd const char *name const void *value size_t size int flags - 191 getxattr man/ cs/ 0xbf const char *path const char *name void *value size_t size - - 192 lgetxattr man/ cs/ 0xc0 const char *path const char *name void *value size_t size - - 193 fgetxattr man/ cs/ 0xc1 int fd const char *name void *value size_t size - - 194 listxattr man/ cs/ 0xc2 const char *path char *list size_t size - - - 195 llistxattr man/ cs/ 0xc3 const char *path char *list size_t size - - - 196 flistxattr man/ cs/ 0xc4 int fd char *list size_t size - - - 197 removexattr man/ cs/ 0xc5 const char *path const char *name - - - - 198 lremovexattr man/ cs/ 0xc6 const char *path const char *name - - - - 199 fremovexattr man/ cs/ 0xc7 int fd const char *name - - - - 200 tkill man/ cs/ 0xc8 pid_t pid int sig - - - - 201 time man/ cs/ 0xc9 time_t *tloc - - - - - 202 futex man/ cs/ 0xca u32 *uaddr int op u32 val struct __kernel_timespec *utime u32 *uaddr2 u32 val3 203 sched_setaffinity man/ cs/ 0xcb pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 204 sched_getaffinity man/ cs/ 0xcc pid_t pid unsigned int len unsigned long *user_mask_ptr - - - 205 set_thread_area man/ cs/ 0xcd ? ? ? ? ? ? 206 io_setup man/ cs/ 0xce unsigned nr_reqs aio_context_t *ctx - - - - 207 io_destroy man/ cs/ 0xcf aio_context_t ctx - - - - - 208 io_getevents man/ cs/ 0xd0 aio_context_t ctx_id long min_nr long nr struct io_event *events struct __kernel_timespec *timeout - 209 io_submit man/ cs/ 0xd1 aio_context_t long struct iocb * * - - - 210 io_cancel man/ cs/ 0xd2 aio_context_t ctx_id struct iocb *iocb struct io_event *result - - - 211 get_thread_area man/ cs/ 0xd3 ? ? ? ? ? ? 212 lookup_dcookie man/ cs/ 0xd4 u64 cookie64 char *buf size_t len - - - 213 epoll_create man/ cs/ 0xd5 int size - - - - - 214 epoll_ctl_old man/ cs/ 0xd6 ? ? ? ? ? ? 215 epoll_wait_old man/ cs/ 0xd7 ? ? ? ? ? ? 216 remap_file_pages man/ cs/ 0xd8 unsigned long start unsigned long size unsigned long prot unsigned long pgoff unsigned long flags - 217 getdents64 man/ cs/ 0xd9 unsigned int fd struct linux_dirent64 *dirent unsigned int count - - - 218 set_tid_address man/ cs/ 0xda int *tidptr - - - - - 219 restart_syscall man/ cs/ 0xdb - - - - - - 220 semtimedop man/ cs/ 0xdc int semid struct sembuf *sops unsigned nsops const struct __kernel_timespec *timeout - - 221 fadvise64 man/ cs/ 0xdd int fd loff_t offset size_t len int advice - - 222 timer_create man/ cs/ 0xde clockid_t which_clock struct sigevent *timer_event_spec timer_t * created_timer_id - - - 223 timer_settime man/ cs/ 0xdf timer_t timer_id int flags const struct __kernel_itimerspec *new_setting struct __kernel_itimerspec *old_setting - - 224 timer_gettime man/ cs/ 0xe0 timer_t timer_id struct __kernel_itimerspec *setting - - - - 225 timer_getoverrun man/ cs/ 0xe1 timer_t timer_id - - - - - 226 timer_delete man/ cs/ 0xe2 timer_t timer_id - - - - - 227 clock_settime man/ cs/ 0xe3 clockid_t which_clock const struct __kernel_timespec *tp - - - - 228 clock_gettime man/ cs/ 0xe4 clockid_t which_clock struct __kernel_timespec *tp - - - - 229 clock_getres man/ cs/ 0xe5 clockid_t which_clock struct __kernel_timespec *tp - - - - 230 clock_nanosleep man/ cs/ 0xe6 clockid_t which_clock int flags const struct __kernel_timespec *rqtp struct __kernel_timespec *rmtp - - 231 exit_group man/ cs/ 0xe7 int error_code - - - - - 232 epoll_wait man/ cs/ 0xe8 int epfd struct epoll_event *events int maxevents int timeout - - 233 epoll_ctl man/ cs/ 0xe9 int epfd int op int fd struct epoll_event *event - - 234 tgkill man/ cs/ 0xea pid_t tgid pid_t pid int sig - - - 235 utimes man/ cs/ 0xeb char *filename struct timeval *utimes - - - - 236 vserver man/ cs/ 0xec ? ? ? ? ? ? 237 mbind man/ cs/ 0xed unsigned long start unsigned long len unsigned long mode const unsigned long *nmask unsigned long maxnode unsigned flags 238 set_mempolicy man/ cs/ 0xee int mode const unsigned long *nmask unsigned long maxnode - - - 239 get_mempolicy man/ cs/ 0xef int *policy unsigned long *nmask unsigned long maxnode unsigned long addr unsigned long flags - 240 mq_open man/ cs/ 0xf0 const char *name int oflag umode_t mode struct mq_attr *attr - - 241 mq_unlink man/ cs/ 0xf1 const char *name - - - - - 242 mq_timedsend man/ cs/ 0xf2 mqd_t mqdes const char *msg_ptr size_t msg_len unsigned int msg_prio const struct __kernel_timespec *abs_timeout - 243 mq_timedreceive man/ cs/ 0xf3 mqd_t mqdes char *msg_ptr size_t msg_len unsigned int *msg_prio const struct __kernel_timespec *abs_timeout - 244 mq_notify man/ cs/ 0xf4 mqd_t mqdes const struct sigevent *notification - - - - 245 mq_getsetattr man/ cs/ 0xf5 mqd_t mqdes const struct mq_attr *mqstat struct mq_attr *omqstat - - - 246 kexec_load man/ cs/ 0xf6 unsigned long entry unsigned long nr_segments struct kexec_segment *segments unsigned long flags - - 247 waitid man/ cs/ 0xf7 int which pid_t pid struct siginfo *infop int options struct rusage *ru - 248 add_key man/ cs/ 0xf8 const char *_type const char *_description const void *_payload size_t plen key_serial_t destringid - 249 request_key man/ cs/ 0xf9 const char *_type const char *_description const char *_callout_info key_serial_t destringid - - 250 keyctl man/ cs/ 0xfa int cmd unsigned long arg2 unsigned long arg3 unsigned long arg4 unsigned long arg5 - 251 ioprio_set man/ cs/ 0xfb int which int who int ioprio - - - 252 ioprio_get man/ cs/ 0xfc int which int who - - - - 253 inotify_init man/ cs/ 0xfd - - - - - - 254 inotify_add_watch man/ cs/ 0xfe int fd const char *path u32 mask - - - 255 inotify_rm_watch man/ cs/ 0xff int fd __s32 wd - - - - 256 migrate_pages man/ cs/ 0x100 pid_t pid unsigned long maxnode const unsigned long *from const unsigned long *to - - 257 openat man/ cs/ 0x101 int dfd const char *filename int flags umode_t mode - - 258 mkdirat man/ cs/ 0x102 int dfd const char * pathname umode_t mode - - - 259 mknodat man/ cs/ 0x103 int dfd const char * filename umode_t mode unsigned dev - - 260 fchownat man/ cs/ 0x104 int dfd const char *filename uid_t user gid_t group int flag - 261 futimesat man/ cs/ 0x105 int dfd const char *filename struct timeval *utimes - - - 262 newfstatat man/ cs/ 0x106 int dfd const char *filename struct stat *statbuf int flag - - 263 unlinkat man/ cs/ 0x107 int dfd const char * pathname int flag - - - 264 renameat man/ cs/ 0x108 int olddfd const char * oldname int newdfd const char * newname - - 265 linkat man/ cs/ 0x109 int olddfd const char *oldname int newdfd const char *newname int flags - 266 symlinkat man/ cs/ 0x10a const char * oldname int newdfd const char * newname - - - 267 readlinkat man/ cs/ 0x10b int dfd const char *path char *buf int bufsiz - - 268 fchmodat man/ cs/ 0x10c int dfd const char * filename umode_t mode - - - 269 faccessat man/ cs/ 0x10d int dfd const char *filename int mode - - - 270 pselect6 man/ cs/ 0x10e int fd_set * fd_set * fd_set * struct __kernel_timespec * void * 271 ppoll man/ cs/ 0x10f struct pollfd * unsigned int struct __kernel_timespec * const sigset_t * size_t - 272 unshare man/ cs/ 0x110 unsigned long unshare_flags - - - - - 273 set_robust_list man/ cs/ 0x111 struct robust_list_head *head size_t len - - - - 274 get_robust_list man/ cs/ 0x112 int pid struct robust_list_head * *head_ptr size_t *len_ptr - - - 275 splice man/ cs/ 0x113 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 276 tee man/ cs/ 0x114 int fdin int fdout size_t len unsigned int flags - - 277 sync_file_range man/ cs/ 0x115 int fd loff_t offset loff_t nbytes unsigned int flags - - 278 vmsplice man/ cs/ 0x116 int fd const struct iovec *iov unsigned long nr_segs unsigned int flags - - 279 move_pages man/ cs/ 0x117 pid_t pid unsigned long nr_pages const void * *pages const int *nodes int *status int flags 280 utimensat man/ cs/ 0x118 int dfd const char *filename struct __kernel_timespec *utimes int flags - - 281 epoll_pwait man/ cs/ 0x119 int epfd struct epoll_event *events int maxevents int timeout const sigset_t *sigmask size_t sigsetsize 282 signalfd man/ cs/ 0x11a int ufd sigset_t *user_mask size_t sizemask - - - 283 timerfd_create man/ cs/ 0x11b int clockid int flags - - - - 284 eventfd man/ cs/ 0x11c unsigned int count - - - - - 285 fallocate man/ cs/ 0x11d int fd int mode loff_t offset loff_t len - - 286 timerfd_settime man/ cs/ 0x11e int ufd int flags const struct __kernel_itimerspec *utmr struct __kernel_itimerspec *otmr - - 287 timerfd_gettime man/ cs/ 0x11f int ufd struct __kernel_itimerspec *otmr - - - - 288 accept4 man/ cs/ 0x120 int struct sockaddr * int * int - - 289 signalfd4 man/ cs/ 0x121 int ufd sigset_t *user_mask size_t sizemask int flags - - 290 eventfd2 man/ cs/ 0x122 unsigned int count int flags - - - - 291 epoll_create1 man/ cs/ 0x123 int flags - - - - - 292 dup3 man/ cs/ 0x124 unsigned int oldfd unsigned int newfd int flags - - - 293 pipe2 man/ cs/ 0x125 int *fildes int flags - - - - 294 inotify_init1 man/ cs/ 0x126 int flags - - - - - 295 preadv man/ cs/ 0x127 unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 296 pwritev man/ cs/ 0x128 unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h - 297 rt_tgsigqueueinfo man/ cs/ 0x129 pid_t tgid pid_t pid int sig siginfo_t *uinfo - - 298 perf_event_open man/ cs/ 0x12a struct perf_event_attr *attr_uptr pid_t pid int cpu int group_fd unsigned long flags - 299 recvmmsg man/ cs/ 0x12b int fd struct mmsghdr *msg unsigned int vlen unsigned flags struct __kernel_timespec *timeout - 300 fanotify_init man/ cs/ 0x12c unsigned int flags unsigned int event_f_flags - - - - 301 fanotify_mark man/ cs/ 0x12d int fanotify_fd unsigned int flags u64 mask int fd const char *pathname - 302 prlimit64 man/ cs/ 0x12e pid_t pid unsigned int resource const struct rlimit64 *new_rlim struct rlimit64 *old_rlim - - 303 name_to_handle_at man/ cs/ 0x12f int dfd const char *name struct file_handle *handle int *mnt_id int flag - 304 open_by_handle_at man/ cs/ 0x130 int mountdirfd struct file_handle *handle int flags - - - 305 clock_adjtime man/ cs/ 0x131 clockid_t which_clock struct __kernel_timex *tx - - - - 306 syncfs man/ cs/ 0x132 int fd - - - - - 307 sendmmsg man/ cs/ 0x133 int fd struct mmsghdr *msg unsigned int vlen unsigned flags - - 308 setns man/ cs/ 0x134 int fd int nstype - - - - 309 getcpu man/ cs/ 0x135 unsigned *cpu unsigned *node struct getcpu_cache *cache - - - 310 process_vm_readv man/ cs/ 0x136 pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 311 process_vm_writev man/ cs/ 0x137 pid_t pid const struct iovec *lvec unsigned long liovcnt const struct iovec *rvec unsigned long riovcnt unsigned long flags 312 kcmp man/ cs/ 0x138 pid_t pid1 pid_t pid2 int type unsigned long idx1 unsigned long idx2 - 313 finit_module man/ cs/ 0x139 int fd const char *uargs int flags - - - 314 sched_setattr man/ cs/ 0x13a pid_t pid struct sched_attr *attr unsigned int flags - - - 315 sched_getattr man/ cs/ 0x13b pid_t pid struct sched_attr *attr unsigned int size unsigned int flags - - 316 renameat2 man/ cs/ 0x13c int olddfd const char *oldname int newdfd const char *newname unsigned int flags - 317 seccomp man/ cs/ 0x13d unsigned int op unsigned int flags void *uargs - - - 318 getrandom man/ cs/ 0x13e char *buf size_t count unsigned int flags - - - 319 memfd_create man/ cs/ 0x13f const char *uname_ptr unsigned int flags - - - - 320 kexec_file_load man/ cs/ 0x140 int kernel_fd int initrd_fd unsigned long cmdline_len const char *cmdline_ptr unsigned long flags - 321 bpf man/ cs/ 0x141 int cmd union bpf_attr *attr unsigned int size - - - 322 execveat man/ cs/ 0x142 int dfd const char *filename const char *const *argv const char *const *envp int flags - 323 userfaultfd man/ cs/ 0x143 int flags - - - - - 324 membarrier man/ cs/ 0x144 int cmd int flags - - - - 325 mlock2 man/ cs/ 0x145 unsigned long start size_t len int flags - - - 326 copy_file_range man/ cs/ 0x146 int fd_in loff_t *off_in int fd_out loff_t *off_out size_t len unsigned int flags 327 preadv2 man/ cs/ 0x147 unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 328 pwritev2 man/ cs/ 0x148 unsigned long fd const struct iovec *vec unsigned long vlen unsigned long pos_l unsigned long pos_h rwf_t flags 329 pkey_mprotect man/ cs/ 0x149 unsigned long start size_t len unsigned long prot int pkey - - 330 pkey_alloc man/ cs/ 0x14a unsigned long flags unsigned long init_val - - - - 331 pkey_free man/ cs/ 0x14b int pkey - - - - - 332 statx man/ cs/ 0x14c int dfd const char *path unsigned flags unsigned mask struct statx *buffer - "},{"title":"input2","date":"2022-06-10T14:43:16.000Z","url":"/2022/06/10/input2/","content":" Stage 1 clear!Firstly, there has argv. It sames like that behind. such as /bin/ls -l: left one represent argv[0], right one represent argv[1], …etc. argc represent the length of argv list. So in order to satisfy strcmp(argv['A'],\"\\x00\") != 0, I can set argv['A'] = \"\\x00\", and next condition. Stage 2 clear!stdio: standard input/output It uses the read. read - read from a file descriptor include: unistd.h ssize_t read(int fd, void *buf, size_t count); 整数值 名称 unistd.h符号常量 stdio.h文件流 0 Standard input STDIN_FILENO stdin 1 Standard output STDOUT_FILENO stdout 2 Standard error STDERR_FILENO stderr read(0, buf, 4);: read 4 bytes from stdin read(2, buf, 4);: read 2 bytes from stderr We can easily use pwntools to start our play. This tool we need called process. We can create program. Cation! stderr_we_want=\"\\x00\\x0a\\x02\\xff\" can’t work well. stderr is a file descriptor. open return file descriptor, we can hand it. Stage 3 clear!also use process. Stage 4 clear!It open a file named \\x0a that mean newline in program, but don’t care it. Start to write in file like Stage 2. fread size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream) Read chunks of generic data from STREAM. return: This number equals the number of bytes transferred only when size is 1. If an error occurs, or the end of the file is reached, the return value is a short item count (or zero). memcpy int memcmp(const void *__s1, const void *__s2, size_t __n) Compare N bytes of S1 and S2. Stage 5 clear!create a new endpoint for communication, usually 127.0.0.1 as host, 9999 as port(out can link). use remote in pwntools. AF_INET: IPv4 Internet protocols, remote support both IPv4 and IPv6. INADDR_ANY: \\#define INADDR_ANY ((in_addr_t) 0x00000000), we can use any address we want. htons( atoi(argv['C']) ): depend on we set value on argv['C'] bind bind a name to a socket int bind(int __fd, const struct sockaddr *__addr, socklen_t __len) Traditionally, this operation is called “assigning a name to a socket”. code: OMG! one write the exp in /tmp/pwn，admin’s soltion exp os.pipe: create a pipe,return (rear, write), left one is “read out”, right one is “write in”. "},{"title":"HITCON-train","date":"2022-06-08T14:43:16.000Z","url":"/2022/06/08/hitcon-train/","content":" HITCON-TrainingFor Linux binary Exploitation Environment Setup Outline Basic Knowledge Introduction Reverse Engineering Static Analysis Dynamic Analysis Exploitation Useful Tool IDA PRO GDB Pwntool lab 1 - sysmagic Section Compile,linking,assmbler Execution how program get run Segment x86 assembly Calling convention lab 2 - open/read/write shellcoding Stack Overflow Buffer Overflow Return to Text/Shellcode lab 3 - ret2shellcode Protection ASLR/DEP/PIE/StackGuard Lazy binding Return to Library lab 4 - ret2lib Return Oriented Programming ROP lab 5 - simple rop Using ROP bypass ASLR ret2plt Stack migration lab 6 - migration Format String Attack Format String Read from arbitrary memory lab 7 - crack Write to arbitrary memory lab 8 - craxme Advanced Trick EBP chain lab 9 - playfmt x64 Binary Exploitation x64 assembly ROP Format string Attack Heap exploitation Glibc memory allocator overview Vulnerablility on heap Use after free lab 10 - hacknote Heap overflow house of force lab 11 - 1 - bamboobox1 unlink lab 11 - 2 - bamboobox2 Advanced heap exploitation Fastbin attack lab 12 - babysecretgarden Shrink the chunk Extend the chunk lab 13 - heapcreator Unsortbin attack lab 14 - magicheap C++ Exploitation Name Mangling Vtable fucntion table Vector &amp; String New &amp; delete Copy constructor &amp; assignment operator lab 15 - zoo 那些 Pwning 的奇淫技巧: write upLAB 1 [sysmagic] 简单的 Symbolic Execution 反编译发现输入buf == v2，buf是随机数，可以直接gdb调试。 断点 0x08048712 &lt;+375&gt;: call 0x8048480 &lt;__isoc99_scanf@plt&gt;，然后随便输入一个值， 其实我在想另一种方法，就是既然变量都在程序里，我们也可以手动计算。 LAB 2 [orw.bin]syscall : shellcode跟pwnable.tw的orw应该是同一题，翻了翻互联网的wp，记录一下。 main orw_seccomp 关注prctl 系统过滤，系统调用函数中只有open，read，write能够进入下一步。 参考一个师傅的做法，首先使用open打开flag，然后用read读取flag，最后通过stdout输出到屏幕。 我的观察： eax作为返回值，当我们传入open(path)返回的文件描述符（见pwnable.kr的fd），一个FILE流的句柄，可以有该句柄读入到另一个寄存器(edi还是esp都可以，我们只是需要一个地址去存放)。 对于汇编的知识，"},{"title":"malloc","date":"2022-06-05T14:43:16.000Z","url":"/2022/06/05/malloc/","content":"There are some cases about heap you want. 0x01 System call - mmap, brk malloc get memory firstly system calls - ask the kernel directly mmap() ask kernel give us some new virtual addresses brk() change data segment size process doesn’t care how the memory is implemented. allocated memory through Linux Kernel and CPU's MMU etc map to process. Then process can transparently access these memory. In CTF match, we use very little space to malloc, so brk system call doesn’t appear. How malloc work? 0x02 malloc implementEasily we consider the large region as heap. Now, we want a size 8 memory to write some chars like AAAABBBB. use malloc(8). Then return a address can be writed. If malloc(8) again, what will happen guess if this is reality, some questions here. how does malloc know what address to return? how does malloc know which areas are still free? some implement here. DLmallocmost common use in malloc. workflow store for each chunk it blocks the size of chunk right before it. keep 4 bytes before chunk (before freed) first malloc return address can be calculated equal 0x804000+0x8=0x804008 Then, how does malloc know the next address after called where the next chunk can be placed? If start of the free/available area: 0x804000, next chunk address at start + now_chunk_size, so at 0x804000 + 0x10(size) = 0x804010. The will happen at malloc of system calls. So there is a point somewhere at always point to a free memory. Given the returned address of malloc, what can we do with that? Writable data addr: this pointer points to the start where we can write data to. Size of chunk: before writable data addr. Next chunk addr: start of current chunk addr add size of this chunk 0x03 small code casesheap1.c objective -&gt; winner struct internet first member: priority, (type): int second member: name, (type): char point (means contain a point to a string somewhere else) *pointer(meaning: contains an address) In 32-Bit machine, point size(a address size) equal 4 bits, but 8 bits in 64-Bit machine. malloc(sizeof(struct internet))So a chunk size: 4(int) + 4(char *) = 8 (tests in 32Bit) i1-&gt;priority = 1; write 1 to the first 4 byte of the allocated area. name point at offset = 4 of i1 object(name point at: i1 + 4).i1-&gt;name = malloc(8);Then it allocates another 8 byte, and the resulting address will stored in the char point name. Those 8 bytes are intended to store a list of characters. As a programmer, we use i1-&gt;name to access name member property. As simply going to a certain offset of i1, in this case i1+4 is the location of the char point name. i1-&gt;name [(0x804d198+8)+4]. [num] express access address in the num address which means fetch info indirectly. i2 looks like i1. We enable the argv[1] = \"aaaabbbb\", argv[2] = \"aaaabbbb\";, so heap info behind. a dangerous function! strcpy strcpy has no length check. So we can overflow name when write over 8 byte and really screw up stuff. size low bit indicate that the PREVIOUS chunk is used, so we find it is 0x11 not 0x10. That becomes more important for the free() The dlmalloc is not really the original dlmalloc. It is usually referred to as ptmalloc. 0x04 overwriteheap overflow works not well. overwrite somewhat? It actually is called got overwrite. GOT - _GLOBAL_OFFSET_TABLE_ : record function offset in program running. function call use the plt addr. we need pad some chars to overwrite the i2 name point address. it looks like this. If we write on i2 name, what will happen? so payload or "},{"title":"unlink","date":"2022-06-01T14:43:16.000Z","url":"/2022/06/01/unlink/","content":""},{"title":"pwn way","date":"2022-05-22T15:39:01.000Z","url":"/2022/05/22/pwn-way/","content":"hitcon train hitcon bilibili wpbash-c:  pwnable.krpwnable.tw 这些学完岂不是神中神， 可惜学不得。 how2heap"},{"title":"acm_solve","date":"2022-05-18T16:38:56.000Z","url":"/2022/05/19/acm_solve/","content":"马上省赛，为了应付一下这个考试，得看看往年题，总结一下经验。 B. Build Roads一个王国，有n个城市。想建n-1条边连接城市，第i个城市有一个建筑公司经验值为ai。想在i和j城市之间建一条路，需要两个城市的建筑公司互相竞争，在修路中两家公司会起冲突，从而造成材料浪费。浪费材料为gcd(ai,aj) 请设计一条路连接n个城市用n条边，花费最少。 分析：如果R = L，那么ai = L，相邻城市之间花费L，总花费L*(n-1)。如果R ≠ L，n较小时暴力连边建生成树(n^2)；如果n较大，若R - L + 1较大，根据素数分布，素数相距大概几百左右，这样L到(R - L + 1) + L之间必然有一个素数，有一个数为素数，gcd就为1，答案为(n - 1)，若R - L + 1较小，R - L + 1区间之内会被取满，根据连续的两个数必然互质可得结果仍然为(n - 1)。 暴力建树，单向建边，取其中任意n-1条边一定会把n个城市给连在一起。所以不需要并查，直接排序依据最小权取n-1个即可。 C. Cat Virus一个国家，有很多族可以被视为有根树。一个族包含黑色和白色，改族新生儿可能是黑色，如果一个新生儿是黑色，那么它的后代也是黑色。 给一个整数k，可以有k种方式标记黑色和白色组成家族成员。两种方式肯定有不完全相同的成员，至少有一个黑色，而另一个为白色。 问如何建一个有根树使得方式为k。 设f(u)为染色u及u所有子树的方案树，若将u染成黑色，则只有一种方案，若将u染成白色，则设u的子节点为v，f(u)=proc(f(v))+1，u方案数为子树方案数之积在加上黑色的一种方案。各子树之间互不影响，所以是乘积。 若k为奇数，我们给k弄一个左儿子和右儿子，向右儿子方向走，f(r) = (k - 1) / 2，f(l) = 2, f(u) = f(l) * f(r) + 1，若k为偶数，我们直接让u连接一个子节点，然后到下一层，方案数边成k - 1。 D. Dyson Box一个盒子二维方格，左下角坐标为（0，0），右上角坐标为（2×10 ^ 5，2×10 ^ 5）。 将有n个事件发生，第i次事件时出现一个立方体，左下角坐标为（xi-1，yi-1），右上角坐标为（xi，yi）。 盒子里有两个地心引力的方向，水平和竖直，有一半的可能是水平，剩下一半是竖直。她开始测量所有立方体轮廓的总长。如果引力方向是水平，所有立方体水平向左移动，如果是竖直，则竖直向下移动。 计算每次事件后两种情况（两种情况是指向左移动或向下移动）的轮廓总长。 对于竖直情况，当已经有一块，添加下一块时要减去2，对于旁边的两列，如果旁边两栋大楼更高，就减2。 F. Birthday Cake请帮助Yamabuki分蛋糕，Yamabuki有n种不同的蛋糕，可以用小写拉丁字母表示，表示蛋糕上面有什么，字符串的拼接表示蛋糕的合并。 若AB满足CC结构，（A，B两个字符串拼接后可以拆成两个相同的字符串即满足此规律），若AB满足，则BA也满足，所以枚举A的时候找可以满足条件的B即可。 "},{"title":"Dest0g3-begin","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/Dest0g3-begin/","content":" simple xor babyrsa babyaes 你知道js吗file 发现是 word 文档，然后换成其他字体，复制到 base64 解码，然后 brainfuck，然后在解码。"},{"title":"prefix sum","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/Prefix_sum/","content":" 记一下二维前缀和公式 "},{"title":"HITCON-train-hacknote","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/HITCON-train-hacknote/","content":" 一个写笔记的程序，下面是程序的一些功能。 因为想去弄懂一些细节，所以在GitHub上搜到了源代码。 顺便看看并总结angelboy大神的幻灯片，分享收获。 The workflow of malloc 第一次执行 malloc 无论一开始 malloc 多少空间 &lt; 128 KB 都会有 kernel 给132 KB 的 heap segment (rw) 这部分为 main arena 第二次执行 malloc 时，只要分配的空间大小不超过 128 KB，则不再执行 system call 跟系统要空间，超过大小才会有 brk 从kernel 索要空间存储。 即使 free 掉所有 main arena 分配的空间，也不会立即还给 kernel 这时存储空间由 glibc 管理 Mechanism of glibc malloc Chunk glibc 在用作存储管理时的数据结构 malloc 时分配出去的为一个 chunk chunk header（prev_size + size）+ user data 如果该 chunk 被 free 则会将 chunk 加入叫做 bin 的链表里 分类 ​ Allocated chunk ​ Free chunk ​ Top chunk heap Allocated chunk prev_size 如果上一个的 chunk 是 freed，则该位置上会存有上一个 chunk 的 size（包括 header） 这里指的上一个是在连续存储的上一个 size 该 chunk 大小，其中有三个 flag PREV_INUSE (bit 0): 上一个 chunk 是否不是 freed IS_MMAPPED (bit 1): 该 chunk 是不是由 mmap 所分配出去的 NON_MAIN_ARENA (bit 2): 是否不属于 main arena 图 free chunk prev_size size fd : point to next chunk（包括 bin） 这里指的是链表中的 next chunk，而非连续存储的 chunk bk : point to last chunk（包括 bin） 这里指的是链表中的 last chunk，而非连续存储的 chunk fd_nextsize : point to next large chunk（不包含 bin） bk_nextsize : point to last large chunk（不包含 bin） freed chunk top chunk 第一次 malloc 时就会将 heap 切成两块 chunk，第一个 chunk 就是分配出去的 chunk，剩下的空间被视为 top chunk，之后要是分配空间不足时会有 top chunk 切出去 prev_size one_gadget strings 用 objdump 打开 libc.so.6 One Gadget: 0x4557a execve(“/bin/sh”, rsp+0x30, environ);"},{"title":"Python about","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/Python/","content":" Python 的一些问题合集argparse 用于命令行解析 第一步 描述软件用途 可选择的参数（带上–加上小写字母） 效果 可选参数后面跟的是该参数的解释，在bash下会变成大写，如下面的--input_file变为INPUT_FILE 解析参数的args&lt;class 'argparse.Namespace'&gt; sys.argv "},{"title":"HITCON-train-echo1","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/echo1/","content":" 开始时会让我们输入在栈上的name，限制长度，bss段的id会复制name。 "},{"title":"decompile_trick","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/decompile/","content":" Tools or stricksobjdump 千万不要学AT&amp;T格式 -M intel: intel 格式 比较intel和AT&amp;T格式的反汇编区别vimdiff &lt;(objdump -d orw) &lt;(objdump -M intel -d orw) 建立快捷intel格式，alias objdump='objdump -M intel readelf 分析 ELF binary 功能 readelf -a | grep STACK 看能不能跑 shellcode E表示可以执行 stack上有x表示可以执行。 ldd 寻找 libc 的一些 symbol 比如 system。 小技巧 寻找某个 symbol 时，写成 ‘ symbol@’，假设 symbol 是某一个函数。 XXD 类似于 IDA pro 的 string Linux 自带的 strings 也不错 ncat Hook &amp; Patch 更改 symbol bad char list bad character 列表 00 \\0 null 0A \\n 回车换行 FF \\f 换页 0D \\r 回车 "},{"title":"fixed_xor","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/fixed_cor/","content":" request a function to xor on two strings with the same length. we need know some tools ^: xor operator "},{"title":"Liunx about","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/linux/","content":" Linux 的一些问题合集 显示Linux 机器 如何在 Ubuntu 16.04(xenial)上安装Python3.8 Ubuntu 22.04 都出了，为什么还去安装使用16.04，想去学习古董版本的Linux。 python2已经被抛弃了，为什么有人还在用。这是一个我们是否应该去追逐潮流的问题，这个问题只有看个人的选择问题。我觉得就像李哥在世界赛掏出一手雷电法王一样，很少有人在排位赛选择使用这个英雄，但是李哥给出了答案，我想用就用，用出来也不一定会输给吃版本福利的英雄。 使用并体验 Pyenv 更新安装Pyenv所需要的前置技能包 git 拉载存储库 配置环境变量 列出可安装的Python列表 可以发现能安装的版本很多 安装Python3.8 Pyenv 正在从源代码构建这个版本的 Python，所以需要很长时间。 验证是否安装了Python3.8.3 将新安装的python3.8放入shell中 help –version :: 显示 pyenv 命令的版本 列出所有可用的 pyenv 命令 exec :: 使用选定的 Python 版本运行可执行文件 global :: 设置或显示全局 Python 版本 help :: 显示命令的帮助 hooks :: 列出给定 pyenv 命令的钩子脚本 init :: 为pyenv配置shell环境 install :: 使用 python-build 安装 Python 版本 local :: 设置或显示本地应用程序特定的 Python 版本 prefix :: Python 版本的显示前缀 rehash :: Rehash pyenv shims（安装可执行文件后运行它） root :: 显示保存版本和垫片的根目录 shell :: 设置或显示特定于 shell 的 Python 版本 shims垫片 :: 列出现有的 pyenv 垫片 uninstall :: 卸载特定的 Python 版本 version :: 显示当前 Python 版本及其来源 version-file :: 检测设置当前pyenv版本的文件 version-name :: 显示当前 Python 版本 version-origin ::解释当前Python版本是如何设置的 版本 ::列出 pyenv 可用的所有 Python 版本 wherece ::列出所有包含给定可执行文件的Python版本 which ::显示可执行文件的完整路径 有关特定命令的信息，请参阅 `pyenv help ‘。 "},{"title":"prctl","date":"2022-05-18T14:43:16.000Z","url":"/2022/05/18/prctl/","content":" "},{"title":"hex2base64","date":"2022-05-16T14:43:16.000Z","url":"/2022/05/16/hex2base64/","content":" I use Python to complete this play. If you don’t have it, you can try to download it and enjoy it. Given the hex string, hex string mean the base16 encode. base16 make each eight bit turn to two hex, then convert to three characters. use bytes.fromhex to unhexlify then use b64encode in base64 module Certainly, we want to write small program to use in the future. Then use some tricks to increase skill about module. def: def mean create a function to use repeatedly. __name__==\"__main__\": create a alone environment. "},{"title":"hello_world in shellcode","date":"2022-05-14T14:43:16.000Z","url":"/2022/05/14/shellcode/","content":" hello_world in shellcodeget syscalls系统调用号： 32位：/usr/include/x86_64-linux-gnu/asm/unistd_32.h 64位：/usr/include/x86_64-linux-gnu/asm/unistd_64.h 以下实验均以64位实验环境作为实验基础 register transmit arguments arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5 arm r7 r0 r0 r1 r2 r3 r4 r5 arm64 x8 x0 x0 x1 x2 x3 x4 x5 x86 eax eax ebx ecx edx esi edi ebp x86_64 rax rax rdi rsi rdx r10 r8 r9 x86_64系统调用寄存器为rax。 first stage clear! 使用系统函数write输出到屏幕，ssize_t write(int fd, const void *buf, size_t count); fd: 文件标识符。当fd为1时，输出到屏幕。 Integer value Name &lt;unistd.h&gt; symbolic constant &lt;stdio.h&gt; file stream 0 Standard input STDIN_FILENO stdin 1 Standard output STDOUT_FILENO stdout 2 Standard error STDERR_FILENO stderr 汇编成为适应系统的可重定位二进制：nasm -felf64 hello_world.asm -o hello_world.o 链接为可执行二进制：ld hello_world.o -o hello_world fetch shellcode from binary use shellcode in C 运行，唉怎么只有一个字母呢？我的”哈喽我叠”呢？ 原因：shellcode中有\\0，他被称为”bad character”，”bad character”会被字符串截断。 bad character hex str function 00 \\0 null 0A \\n 换行 FF \\f 换页 0D \\r 回车 mov eax, 0x1会出现\\0，al表示eax寄存器的低位。 先通过xor使寄存器置零 再通过add增加寄存器到指定值 但是字符串地址仍然有0。 relative address technique通过rel可以找到相对rip偏移的变量地址，执行到存储buf的寄存器rsi取地址时，rip减去偏移的地址就是字符串地址，将该地址加载到rsi中。 看一下dump出来的shellcode 已经没有bad char了。 jump-call technique写一个简单的asm教学程序。 汇编和链接后使用gdb调试，可以发现在call string后，stack的信息 pop rsi后rsi寄存器的信息 该字符串就跳到rsi寄存器上，所以我们可以使用这个方式给rsi赋值。 最终的asm程序 stack technique字符串逆序插入 放入栈中，然后push进去，push只能放入4个字节，该字符串可以按12个字节来算，4个字节push，然后剩下8个字节先放入一个通用寄存器，然后在push进去。"},{"title":"powershell","date":"2022-04-18T14:43:16.000Z","url":"/2022/04/18/powershell/","content":" 显示环境变量 更改用户名和密码 "}]